[{"/home/pheno/Documents/makesense/client/src/components/NavMain.jsx":"1","/home/pheno/Documents/makesense/client/src/pages/Contacts/ActiveContacts.jsx":"2","/home/pheno/Documents/makesense/client/src/pages/Contacts/NeedCallContacts.jsx":"3","/home/pheno/Documents/makesense/client/src/components/Auth/UserProvider.jsx":"4","/home/pheno/Documents/makesense/client/src/pages/Institutions/CreateInstitution.jsx":"5","/home/pheno/Documents/makesense/client/src/pages/Calls/Calls.jsx":"6","/home/pheno/Documents/makesense/client/src/pages/Calls/EditCall.jsx":"7","/home/pheno/Documents/makesense/client/src/pages/Users/EditUser.jsx":"8","/home/pheno/Documents/makesense/client/src/components/Auth/UserContext.jsx":"9","/home/pheno/Documents/makesense/client/src/pages/Contacts/NeedWriteContacts.jsx":"10","/home/pheno/Documents/makesense/client/src/components/Forms/FormCall.jsx":"11","/home/pheno/Documents/makesense/client/src/App.jsx":"12","/home/pheno/Documents/makesense/client/src/pages/Contacts/Mycontacts.jsx":"13","/home/pheno/Documents/makesense/client/src/pages/Signin.jsx":"14","/home/pheno/Documents/makesense/client/src/pages/Contacts/InactiveContacts.jsx":"15","/home/pheno/Documents/makesense/client/src/components/Forms/FormSignup.jsx":"16"},{"size":2098,"mtime":1606304956956,"results":"17","hashOfConfig":"18"},{"size":4807,"mtime":1606925174610,"results":"19","hashOfConfig":"18"},{"size":6819,"mtime":1606925486464,"results":"20","hashOfConfig":"18"},{"size":1304,"mtime":1605432291841,"results":"21","hashOfConfig":"18"},{"size":229,"mtime":1606214532804,"results":"22","hashOfConfig":"18"},{"size":131,"mtime":1605006861899,"results":"23","hashOfConfig":"18"},{"size":465,"mtime":1605607869835,"results":"24","hashOfConfig":"18"},{"size":137,"mtime":1605009008363,"results":"25","hashOfConfig":"18"},{"size":78,"mtime":1604927652591,"results":"26","hashOfConfig":"18"},{"size":4974,"mtime":1606833459620,"results":"27","hashOfConfig":"18"},{"size":5494,"mtime":1606909674044,"results":"28","hashOfConfig":"18"},{"size":3046,"mtime":1606814745414,"results":"29","hashOfConfig":"18"},{"size":2762,"mtime":1606404763091,"results":"30","hashOfConfig":"18"},{"size":165,"mtime":1604927652591,"results":"31","hashOfConfig":"18"},{"size":4479,"mtime":1606813943213,"results":"32","hashOfConfig":"18"},{"size":2551,"mtime":1607074598872,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"139fx7f",{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pheno/Documents/makesense/client/src/components/NavMain.jsx",[],["69","70"],"/home/pheno/Documents/makesense/client/src/pages/Contacts/ActiveContacts.jsx",["71"],"/home/pheno/Documents/makesense/client/src/pages/Contacts/NeedCallContacts.jsx",["72","73","74","75"],"import React, { Component } from \"react\";\nimport apiHandler from \"../../api/apiHandler\";\nimport SearchBar from \"../../components/Forms/SearchBar\";\nimport { Link } from \"react-router-dom\";\n\nclass NeedCallContacts extends Component {\n  state = {\n    contacts: [],\n    searchContacts: [],\n  };\n\n  componentDidMount() {\n    apiHandler\n      .getAll(\"/api/contacts\")\n      .then((apiRes) => {\n        this.getNeedCallContacts(apiRes.data);\n        this.isCallNeeded(apiRes.data);\n      })\n      .catch((apiErr) => {\n        console.log(apiErr);\n      });\n  }\n\n  isCallNeeded(data) {\n    for (const [index, item] of data.entries()) {\n      if (item.lastcall) {\n        let lastcall = new Date(item.lastcall);\n        let today = new Date();\n        const getHour = today.getHours();\n\n        // apiHandler\n        // .updateOne(\"/api/contacts/\" + item._id, {\n        //   isTime: true,\n        // })\n        // .then((apiRes) => {console.log(apiRes);})\n        // .catch((apiErr) => console.log(apiErr));\n\n        // if (getHour > 14 && item.time === \"afternoon\") {\n        //   apiHandler\n        //     .updateOne(\"/api/contacts/\" + item._id, {\n        //       isTime: true,\n        //     })\n        //     .then((apiRes) => {})\n        //     .catch((apiErr) => console.log(apiErr));\n        // } else if (getHour < 14 && item.time === \"morning\") {\n        //   apiHandler\n        //     .updateOne(\"/api/contacts/\" + item._id, {\n        //       isTime: true,\n        //     })\n        //     .then((apiRes) => {})\n        //     .catch((apiErr) => console.log(apiErr));\n        // } else if (item.time === \"all\") {\n        //   apiHandler\n        //     .updateOne(\"/api/contacts/\" + item._id, {\n        //       isTime: true,\n        //     })\n        //     .then((apiRes) => {})\n        //     .catch((apiErr) => console.log(apiErr));\n        // } else {\n        //   apiHandler\n        //     .updateOne(\"/api/contacts/\" + item._id, {\n        //       isTime: false,\n        //     })\n        //     .then((apiRes) => {})\n        //     .catch((apiErr) => console.log(apiErr));\n        // }\n\n        let dateDiff = lastcall.getTime() - today.getTime();\n        let days = Math.ceil(dateDiff / (1000 * 3600 * 24));\n        // console.log(days);\n\n        if (item.frequency === \"Chaque jour\" && days === -1) {\n          apiHandler\n            .updateOne(\"/api/contacts/\" + item._id, {\n              needcall: true,\n            })\n            .then((apiRes) =>\n              apiHandler\n                .getAll(\"/api/contacts\")\n                .then((apiRes) => {\n                  // this.setState({ contacts: apiRes.data });\n                  this.getNeedCallContacts(apiRes.data);\n                })\n                .catch((apiErr) => {\n                  console.log(apiErr);\n                })\n            )\n            .catch((apiErr) => console.log(apiErr));\n        } else if (item.frequency === \"2 fois par semaine\" && days === -3) {\n          apiHandler\n            .updateOne(\"/api/contacts/\" + item._id, {\n              needcall: true,\n            })\n            .then((apiRes) =>\n              apiHandler\n                .getAll(\"/api/contacts\")\n                .then((apiRes) => {\n                  this.getNeedCallContacts(apiRes.data);\n                })\n                .catch((apiErr) => {\n                  console.log(apiErr);\n                })\n            )\n            .catch((apiErr) => console.log(apiErr));\n        } else if (item.frequency === \"1 fois par semaine\" && days === -7) {\n          apiHandler\n            .updateOne(\"/api/contacts/\" + item._id, {\n              needcall: true,\n            })\n            .then((apiRes) =>\n              apiHandler\n                .getAll(\"/api/contacts\")\n                .then((apiRes) => {\n                  this.getNeedCallContacts(apiRes.data);\n                })\n                .catch((apiErr) => {\n                  console.log(apiErr);\n                })\n            )\n            .catch((apiErr) => console.log(apiErr));\n        }\n      }\n    }\n  }\n\n  getNeedCallContacts(contacts) {\n    const needCallContacts = contacts.filter(\n      (contact) =>\n        contact.needcall === true &&\n        contact.isActive === true &&\n        contact.type != \"eMail\"\n    );\n    this.setState({\n      contacts: needCallContacts,\n      searchContacts: needCallContacts,\n    });\n  }\n\n  formatDate(date) {\n    const getDate = date.split(\"T\")[0].split(\"-\");\n    const formatedDate = `${getDate[2]}-${getDate[1]}-${getDate[0]}`;\n    // return `${date[2]}-${date[1]}-${date[0]}`;\n    return formatedDate;\n  }\n\n  search = (searchContact) => {\n    const copyContacts = [...this.state.contacts];\n\n    // return product.name.toLowerCase().includes(props.name.toLowerCase())\n\n    const filteredContacts = copyContacts.filter((contact) =>\n      contact.name.toLowerCase().includes(searchContact.search.toLowerCase())\n    );\n    this.setState({ searchContacts: filteredContacts });\n  };\n\n  render() {\n    if (!this.state.contacts) {\n      return <div>Loading</div>;\n    }\n\n    const randomOrder = this.state.searchContacts.sort(\n      () => Math.random() - 0.5\n    );\n\n    return (\n      <div className=\"contacts-needcall\">\n        <h3 style={{ marginBottom: \"10px\", color: \"#e36164\" }}>\n          {this.state.searchContacts.length} contact\n          {this.state.searchContacts.length > 1 ? \"s\" : \"\"} attend\n          {this.state.searchContacts.length > 1 ? \"ent\" : \"\"} nos appels\n        </h3>\n        <SearchBar handleSearch={this.search} type=\"contact\" />\n        <table>\n          <thead>\n            <tr>\n              <th scope=\"col\">Nom</th>\n              <th scope=\"col\">Dernier Appel</th>\n              {/* <th scope=\"col\">Time</th> */}\n              <th scope=\"col\">Fréquence d'appel</th>\n            </tr>\n          </thead>\n          <tbody>\n            {randomOrder.map((contact) => (\n              <tr key={contact._id}>\n                <td scope=\"row\" data-label=\"Nom\">\n                  <Link to={`/contacts/${contact._id}/`}>{contact.name}</Link>\n                </td>\n                <td data-label=\"Dernier Appel\">\n                  <Link to={`/contacts/${contact._id}/`}>\n                    {contact.lastcall\n                      ? this.formatDate(contact.lastcall)\n                      : \"Aucun appel\"}\n                  </Link>\n                </td>\n                {/* <td scope=\"row\" data-label=\"Nom\">\n                  <Link to={`/contacts/${contact._id}/`}>{contact.time}</Link>\n                </td> */}\n                <td data-label=\"Fréquence d'appel\">\n                  <Link to={`/contacts/${contact._id}/`}>\n                    {contact.frequency}\n                  </Link>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default NeedCallContacts;\n","/home/pheno/Documents/makesense/client/src/components/Auth/UserProvider.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Institutions/CreateInstitution.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Calls/Calls.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Calls/EditCall.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Users/EditUser.jsx",[],"/home/pheno/Documents/makesense/client/src/components/Auth/UserContext.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Contacts/NeedWriteContacts.jsx",["76","77"],"/home/pheno/Documents/makesense/client/src/components/Forms/FormCall.jsx",["78"],"/home/pheno/Documents/makesense/client/src/App.jsx",[],["79","80"],"/home/pheno/Documents/makesense/client/src/pages/Contacts/Mycontacts.jsx",["81","82"],"/home/pheno/Documents/makesense/client/src/pages/Signin.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Contacts/InactiveContacts.jsx",["83"],"/home/pheno/Documents/makesense/client/src/components/Forms/FormSignup.jsx",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":118,"column":21,"nodeType":"90","endLine":118,"endColumn":32},{"ruleId":"91","severity":1,"message":"92","line":25,"column":17,"nodeType":"93","messageId":"94","endLine":25,"endColumn":22},{"ruleId":"91","severity":1,"message":"95","line":29,"column":15,"nodeType":"93","messageId":"94","endLine":29,"endColumn":22},{"ruleId":"96","severity":1,"message":"97","line":131,"column":22,"nodeType":"98","messageId":"99","endLine":131,"endColumn":24},{"ruleId":"88","severity":1,"message":"89","line":186,"column":21,"nodeType":"90","endLine":186,"endColumn":32},{"ruleId":"91","severity":1,"message":"92","line":25,"column":17,"nodeType":"93","messageId":"94","endLine":25,"endColumn":22},{"ruleId":"88","severity":1,"message":"89","line":144,"column":21,"nodeType":"90","endLine":144,"endColumn":32},{"ruleId":"91","severity":1,"message":"100","line":6,"column":26,"nodeType":"93","messageId":"94","endLine":6,"endColumn":42},{"ruleId":"84","replacedBy":"101"},{"ruleId":"86","replacedBy":"102"},{"ruleId":"91","severity":1,"message":"92","line":29,"column":17,"nodeType":"93","messageId":"94","endLine":29,"endColumn":22},{"ruleId":"88","severity":1,"message":"89","line":71,"column":21,"nodeType":"90","endLine":71,"endColumn":32},{"ruleId":"88","severity":1,"message":"89","line":111,"column":21,"nodeType":"90","endLine":111,"endColumn":32},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"jsx-a11y/scope","The scope prop can only be used on <th> elements.","JSXAttribute","no-unused-vars","'index' is assigned a value but never used.","Identifier","unusedVar","'getHour' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'setDefaultLocale' is defined but never used.",["103"],["104"],"no-global-assign","no-unsafe-negation"]