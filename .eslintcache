[{"/home/pheno/Documents/makesense/client/src/index.js":"1","/home/pheno/Documents/makesense/client/src/pages/Signin.jsx":"2","/home/pheno/Documents/makesense/client/src/pages/Signup.jsx":"3","/home/pheno/Documents/makesense/client/src/pages/Contacts/EditContact.jsx":"4","/home/pheno/Documents/makesense/client/src/pages/Institutions/EditInstitution.jsx":"5","/home/pheno/Documents/makesense/client/src/pages/Calls/CreateCall.jsx":"6","/home/pheno/Documents/makesense/client/src/pages/Calls/Calls.jsx":"7","/home/pheno/Documents/makesense/client/src/pages/Calls/EditCall.jsx":"8","/home/pheno/Documents/makesense/client/src/components/Auth/UserContext.jsx":"9","/home/pheno/Documents/makesense/client/src/pages/Contacts/NeedWriteContacts.jsx":"10","/home/pheno/Documents/makesense/client/src/components/Forms/FormInstitution.jsx":"11","/home/pheno/Documents/makesense/client/src/pages/Home.jsx":"12","/home/pheno/Documents/makesense/client/src/components/NavMain.jsx":"13","/home/pheno/Documents/makesense/client/src/pages/Contacts/ActiveContacts.jsx":"14","/home/pheno/Documents/makesense/client/src/pages/Contacts/NeedCallContacts.jsx":"15","/home/pheno/Documents/makesense/client/src/App.jsx":"16","/home/pheno/Documents/makesense/client/src/pages/Contacts/InactiveContacts.jsx":"17","/home/pheno/Documents/makesense/client/src/components/Forms/FormSignin.jsx":"18","/home/pheno/Documents/makesense/client/src/components/Forms/FormCall.jsx":"19","/home/pheno/Documents/makesense/client/src/pages/Profile.jsx":"20","/home/pheno/Documents/makesense/client/src/pages/Contacts/Contacts.jsx":"21","/home/pheno/Documents/makesense/client/src/pages/Contacts/CreateContact.jsx":"22","/home/pheno/Documents/makesense/client/src/pages/Institutions/CreateInstitution.jsx":"23","/home/pheno/Documents/makesense/client/src/pages/Contacts/OneContact.jsx":"24","/home/pheno/Documents/makesense/client/src/pages/Institutions/Institutions.jsx":"25","/home/pheno/Documents/makesense/client/src/pages/Institutions/OneInstitution.jsx":"26","/home/pheno/Documents/makesense/client/src/pages/Users/CreateUser.jsx":"27","/home/pheno/Documents/makesense/client/src/pages/Users/EditUser.jsx":"28","/home/pheno/Documents/makesense/client/src/pages/Contacts/Mycontacts.jsx":"29","/home/pheno/Documents/makesense/client/src/components/Forms/FormSignup.jsx":"30","/home/pheno/Documents/makesense/client/src/components/Forms/SearchBar.jsx":"31","/home/pheno/Documents/makesense/client/src/components/ProtectedRoute.jsx":"32","/home/pheno/Documents/makesense/client/src/components/ProtectedAdminRoute.jsx":"33","/home/pheno/Documents/makesense/client/src/components/Forms/FormContact.jsx":"34","/home/pheno/Documents/makesense/client/src/api/apiHandler.js":"35","/home/pheno/Documents/makesense/client/src/components/Auth/withUser.jsx":"36","/home/pheno/Documents/makesense/client/src/components/Auth/UserProvider.jsx":"37","/home/pheno/Documents/makesense/client/src/pages/Users/Users.jsx":"38","/home/pheno/Documents/makesense/client/src/pages/Users/Volunteers.jsx":"39","/home/pheno/Documents/makesense/client/src/components/Forms/FormVolunteer.jsx":"40"},{"size":401,"mtime":1606566172595,"results":"41","hashOfConfig":"42"},{"size":165,"mtime":1604927652591,"results":"43","hashOfConfig":"42"},{"size":165,"mtime":1604927652591,"results":"44","hashOfConfig":"42"},{"size":271,"mtime":1605607226743,"results":"45","hashOfConfig":"42"},{"size":271,"mtime":1606214655530,"results":"46","hashOfConfig":"42"},{"size":411,"mtime":1605785776677,"results":"47","hashOfConfig":"42"},{"size":131,"mtime":1605006861899,"results":"48","hashOfConfig":"42"},{"size":465,"mtime":1605607869835,"results":"49","hashOfConfig":"42"},{"size":78,"mtime":1604927652591,"results":"50","hashOfConfig":"42"},{"size":4897,"mtime":1606403283832,"results":"51","hashOfConfig":"42"},{"size":7793,"mtime":1606815819402,"results":"52","hashOfConfig":"42"},{"size":1849,"mtime":1606404420315,"results":"53","hashOfConfig":"42"},{"size":2098,"mtime":1606304956956,"results":"54","hashOfConfig":"42"},{"size":4732,"mtime":1606813938681,"results":"55","hashOfConfig":"42"},{"size":5162,"mtime":1606403279468,"results":"56","hashOfConfig":"42"},{"size":3046,"mtime":1606814745414,"results":"57","hashOfConfig":"42"},{"size":4479,"mtime":1606813943213,"results":"58","hashOfConfig":"42"},{"size":2290,"mtime":1606816688549,"results":"59","hashOfConfig":"42"},{"size":3883,"mtime":1606586113060,"results":"60","hashOfConfig":"42"},{"size":173,"mtime":1605438246268,"results":"61","hashOfConfig":"42"},{"size":1118,"mtime":1606296601606,"results":"62","hashOfConfig":"42"},{"size":225,"mtime":1605027776385,"results":"63","hashOfConfig":"42"},{"size":229,"mtime":1606214532804,"results":"64","hashOfConfig":"42"},{"size":13444,"mtime":1606586462232,"results":"65","hashOfConfig":"42"},{"size":6253,"mtime":1606403181748,"results":"66","hashOfConfig":"42"},{"size":149,"mtime":1605006951631,"results":"67","hashOfConfig":"42"},{"size":141,"mtime":1605008991668,"results":"68","hashOfConfig":"42"},{"size":137,"mtime":1605009008363,"results":"69","hashOfConfig":"42"},{"size":2762,"mtime":1606404763091,"results":"70","hashOfConfig":"42"},{"size":2370,"mtime":1606817798679,"results":"71","hashOfConfig":"42"},{"size":764,"mtime":1606557266268,"results":"72","hashOfConfig":"42"},{"size":463,"mtime":1604927652591,"results":"73","hashOfConfig":"42"},{"size":456,"mtime":1605432058481,"results":"74","hashOfConfig":"42"},{"size":5752,"mtime":1606815730959,"results":"75","hashOfConfig":"42"},{"size":1508,"mtime":1606817910616,"results":"76","hashOfConfig":"42"},{"size":1067,"mtime":1604927652591,"results":"77","hashOfConfig":"42"},{"size":1304,"mtime":1605432291841,"results":"78","hashOfConfig":"42"},{"size":5451,"mtime":1606814768073,"results":"79","hashOfConfig":"42"},{"size":2707,"mtime":1606814235121,"results":"80","hashOfConfig":"42"},{"size":3442,"mtime":1606814812701,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"139fx7f",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"84"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"100"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"106"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"91"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pheno/Documents/makesense/client/src/index.js",[],["173","174"],"/home/pheno/Documents/makesense/client/src/pages/Signin.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Signup.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Contacts/EditContact.jsx",[],["175","176"],"/home/pheno/Documents/makesense/client/src/pages/Institutions/EditInstitution.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Calls/CreateCall.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Calls/Calls.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Calls/EditCall.jsx",[],["177","178"],"/home/pheno/Documents/makesense/client/src/components/Auth/UserContext.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Contacts/NeedWriteContacts.jsx",["179","180"],"import React, { Component } from \"react\";\nimport apiHandler from \"../../api/apiHandler\";\nimport { Link } from \"react-router-dom\";\nimport SearchBar from \"../../components/Forms/SearchBar\";\n\nclass NeedWriteContacts extends Component {\n  state = {\n    contacts: [],\n    searchContacts: [],\n  };\n\n  componentDidMount() {\n    apiHandler\n      .getAll(\"/api/contacts\")\n      .then((apiRes) => {\n        this.getNeedWriteContacts(apiRes.data)\n        this.isCallNeeded();\n      })\n      .catch((apiErr) => {\n        console.log(apiErr);\n      });\n  }\n\n  isCallNeeded() {\n    for (const [index, item] of this.state.contacts.entries()) {\n      if (item.lastcall) {\n        let lastcall = new Date(item.lastcall);\n        let today = new Date();\n\n        let dateDiff = lastcall.getTime() - today.getTime();\n        let days = Math.ceil(dateDiff / (1000 * 3600 * 24));\n        // console.log(days);\n\n        if (item.frequency === \"Chaque jour\" && days === -1) {\n          apiHandler\n            .updateOne(\"/api/contacts/\" + item._id, {\n              needcall: true,\n            })\n            .then((apiRes) =>\n              apiHandler\n                .getAll(\"/api/contacts\")\n                .then((apiRes) => {\n                  this.getNeedWriteContacts(apiRes.data);\n                })\n                .catch((apiErr) => {\n                  console.log(apiErr);\n                })\n            )\n            .catch((apiErr) => console.log(apiErr));\n        } else if (item.frequency === \"2 fois par semaine\" && days === -3) {\n          apiHandler\n            .updateOne(\"/api/contacts/\" + item._id, {\n              needcall: true,\n            })\n            .then((apiRes) =>\n              apiHandler\n                .getAll(\"/api/contacts\")\n                .then((apiRes) => {\n                  this.getNeedWriteContacts(apiRes.data);\n                })\n                .catch((apiErr) => {\n                  console.log(apiErr);\n                })\n            )\n            .catch((apiErr) => console.log(apiErr));\n        } else if (item.frequency === \"1 fois par semaine\" && days === -7) {\n          apiHandler\n            .updateOne(\"/api/contacts/\" + item._id, {\n              needcall: true,\n            })\n            .then((apiRes) =>\n              apiHandler\n                .getAll(\"/api/contacts\")\n                .then((apiRes) => {\n                  this.getNeedWriteContacts(apiRes.data);\n                })\n                .catch((apiErr) => {\n                  console.log(apiErr);\n                })\n            )\n            .catch((apiErr) => console.log(apiErr));\n        }\n      }\n    }\n  }\n\n  getNeedWriteContacts(contacts) {\n    const needWriteContacts = contacts.filter(\n      (contact) => contact.type === \"eMail\" && contact.isActive === true\n    );\n    this.setState({\n      contacts: needWriteContacts,\n      searchContacts: needWriteContacts,\n    });\n  }\n\n  formatDate(date) {\n    const getDate = date.split(\"T\")[0].split(\"-\");\n    const formatedDate = `${getDate[2]}-${getDate[1]}-${getDate[0]}`;\n    // return `${date[2]}-${date[1]}-${date[0]}`;\n    return formatedDate;\n  }\n\n  search = (searchContact) => {\n    const copyContacts = [...this.state.contacts];\n\n    // return product.name.toLowerCase().includes(props.name.toLowerCase())\n\n    const filteredContacts = copyContacts.filter((contact) =>\n      contact.name.toLowerCase().includes(searchContact.search.toLowerCase())\n    );\n    this.setState({ searchContacts: filteredContacts });\n  };\n\n  render() {\n    if (!this.state.contacts) {\n      return <div>Loading</div>;\n    }\n    return (\n      <div className=\"contacts-needwrite\">\n        <h3 style={{ marginBottom: \"10px\", color: \"#e36164\" }}>\n          {this.state.searchContacts.length} contact\n          {this.state.searchContacts.length > 1 ? \"s\" : \"\"} attend\n          {this.state.searchContacts.length > 1 ? \"ent\" : \"\"} nos mails\n        </h3>\n        <SearchBar handleSearch={this.search} type=\"contact\"/>\n        <table>\n          <thead>\n            <tr>\n              <th scope=\"col\">Nom</th>\n              <th scope=\"col\">\n                Dernier\n                <br />\n                mail\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.searchContacts.map((contact) => (\n              <tr key={contact._id}>\n                <td scope=\"row\" data-label=\"Nom\">\n                  <Link to={`/contacts/${contact._id}/`}>{contact.name}</Link>\n                </td>\n                <td data-label=\"Dernier mail\">\n                  <Link to={`/contacts/${contact._id}/`}>\n                    {\" \"}\n                    {contact.lastcall\n                      ? this.formatDate(contact.lastcall)\n                      : \"never\"}\n                  </Link>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default NeedWriteContacts;\n",["181","182"],"/home/pheno/Documents/makesense/client/src/components/Forms/FormInstitution.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Home.jsx",["183"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport apiHandler from \"../api/apiHandler.js\";\nimport { UserContext } from \"../components/Auth/UserContext\";\nimport Mycontacts from \"./Contacts/Mycontacts.jsx\";\nimport NeedCallContacts from \"./Contacts/NeedCallContacts.jsx\";\nimport NeedWriteContacts from \"./Contacts/NeedWriteContacts.jsx\";\n\nclass Home extends Component {\n  static contextType = UserContext;\n\n  state = {\n    contacts: [],\n  };\n\n  componentDidMount() {\n    apiHandler\n      .getAll(\"/api/contacts\")\n      .then((apiRes) => {\n        this.setState({ contacts: apiRes.data });\n        this.setInstitution();\n      })\n      .catch((apiErr) => {\n        console.log(apiErr);\n      });\n  }\n\n  setInstitution = () => {\n    for (const contact of this.state.contacts) {\n      if (contact.institution_code && !contact.institution) {\n        apiHandler\n          .getAll(\"/api/institutions/\")\n          .then((apiRes) => {\n            const filteredInstitutions = apiRes.data.filter((institution) =>\n              institution.code.includes(contact.institution_code)\n            );\n            apiHandler\n              .updateOne(\"/api/contacts/\" + contact._id, {\n                institution: filteredInstitutions[0]._id,\n              })\n              .then((apiRes) => {})\n              .catch((apiErr) => console.log(apiErr));\n          })\n          .catch((apiErr) => {\n            console.log(apiErr);\n          });\n      }\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"home page\">\n       \n        <div className=\"contacts-home\">\n        {this.context.user && this.context.user.contacts.length > 0 ? (\n          <Mycontacts />\n        ) : (\n          \"\"\n        )}\n          <NeedCallContacts />\n          <NeedWriteContacts />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","/home/pheno/Documents/makesense/client/src/components/NavMain.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Contacts/ActiveContacts.jsx",["184"],"/home/pheno/Documents/makesense/client/src/pages/Contacts/NeedCallContacts.jsx",["185","186","187"],"import React, { Component } from \"react\";\nimport apiHandler from \"../../api/apiHandler\";\nimport SearchBar from \"../../components/Forms/SearchBar\";\nimport { Link } from \"react-router-dom\";\n\nclass NeedCallContacts extends Component {\n  state = {\n    contacts: [],\n    searchContacts: [],\n  };\n\n  componentDidMount() {\n    apiHandler\n      .getAll(\"/api/contacts\")\n      .then((apiRes) => {\n        this.getNeedCallContacts(apiRes.data);\n        this.isCallNeeded();\n      })\n      .catch((apiErr) => {\n        console.log(apiErr);\n      });\n  }\n\n  isCallNeeded() {\n    for (const [index, item] of this.state.contacts.entries()) {\n      if (item.lastcall) {\n        let lastcall = new Date(item.lastcall);\n        let today = new Date();\n\n        let dateDiff = lastcall.getTime() - today.getTime();\n        let days = Math.ceil(dateDiff / (1000 * 3600 * 24));\n        // console.log(days);\n\n        if (item.frequency === \"Chaque jour\" && days === -1) {\n          apiHandler\n            .updateOne(\"/api/contacts/\" + item._id, {\n              needcall: true,\n            })\n            .then((apiRes) =>\n              apiHandler\n                .getAll(\"/api/contacts\")\n                .then((apiRes) => {\n                  // this.setState({ contacts: apiRes.data });\n                  this.getNeedCallContacts(apiRes.data);\n                })\n                .catch((apiErr) => {\n                  console.log(apiErr);\n                })\n            )\n            .catch((apiErr) => console.log(apiErr));\n        } else if (item.frequency === \"2 fois par semaine\" && days === -3) {\n          apiHandler\n            .updateOne(\"/api/contacts/\" + item._id, {\n              needcall: true,\n            })\n            .then((apiRes) =>\n              apiHandler\n                .getAll(\"/api/contacts\")\n                .then((apiRes) => {\n                  this.getNeedCallContacts(apiRes.data);\n                })\n                .catch((apiErr) => {\n                  console.log(apiErr);\n                })\n            )\n            .catch((apiErr) => console.log(apiErr));\n        } else if (item.frequency === \"1 fois par semaine\" && days === -7) {\n          apiHandler\n            .updateOne(\"/api/contacts/\" + item._id, {\n              needcall: true,\n            })\n            .then((apiRes) =>\n              apiHandler\n                .getAll(\"/api/contacts\")\n                .then((apiRes) => {\n                  this.getNeedCallContacts(apiRes.data);\n                })\n                .catch((apiErr) => {\n                  console.log(apiErr);\n                })\n            )\n            .catch((apiErr) => console.log(apiErr));\n        }\n      }\n    }\n  }\n\n  getNeedCallContacts(contacts) {\n    const needCallContacts = contacts.filter(\n      (contact) =>\n        contact.needcall === true &&\n        contact.isActive === true &&\n        contact.type != \"eMail\"\n    );\n    this.setState({\n      contacts: needCallContacts,\n      searchContacts: needCallContacts,\n    });\n  }\n\n  formatDate(date) {\n    const getDate = date.split(\"T\")[0].split(\"-\");\n    const formatedDate = `${getDate[2]}-${getDate[1]}-${getDate[0]}`;\n    // return `${date[2]}-${date[1]}-${date[0]}`;\n    return formatedDate;\n  }\n\n  search = (searchContact) => {\n    const copyContacts = [...this.state.contacts];\n\n    // return product.name.toLowerCase().includes(props.name.toLowerCase())\n\n    const filteredContacts = copyContacts.filter((contact) =>\n      contact.name.toLowerCase().includes(searchContact.search.toLowerCase())\n    );\n    this.setState({ searchContacts: filteredContacts });\n  };\n\n  render() {\n    if (!this.state.contacts) {\n      return <div>Loading</div>;\n    }\n    return (\n      <div className=\"contacts-needcall\">\n        <h3 style={{ marginBottom: \"10px\", color: \"#e36164\" }}>\n          {this.state.searchContacts.length} contact\n          {this.state.searchContacts.length > 1 ? \"s\" : \"\"} attend\n          {this.state.searchContacts.length > 1 ? \"ent\" : \"\"} nos appels\n        </h3>\n        <SearchBar handleSearch={this.search} type=\"contact\" />\n        <table>\n          <thead>\n            <tr>\n              <th scope=\"col\">Nom</th>\n              <th scope=\"col\">Dernier Appel</th>\n              <th scope=\"col\">Fréquence d'appel</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.searchContacts.map((contact) => (\n              <tr key={contact._id}>\n                <td scope=\"row\" data-label=\"Nom\">\n                  <Link to={`/contacts/${contact._id}/`}>{contact.name}</Link>\n                </td>\n                <td data-label=\"Dernier Appel\">\n                  <Link to={`/contacts/${contact._id}/`}>\n                    {contact.lastcall\n                      ? this.formatDate(contact.lastcall)\n                      : \"never\"}\n                  </Link>\n                </td>\n                <td data-label=\"Fréquence d'appel\">\n                  <Link to={`/contacts/${contact._id}/`}>\n                    {contact.frequency}\n                  </Link>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default NeedCallContacts;\n","/home/pheno/Documents/makesense/client/src/App.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Contacts/InactiveContacts.jsx",["188"],"/home/pheno/Documents/makesense/client/src/components/Forms/FormSignin.jsx",[],"/home/pheno/Documents/makesense/client/src/components/Forms/FormCall.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Profile.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Contacts/Contacts.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Contacts/CreateContact.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Institutions/CreateInstitution.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Contacts/OneContact.jsx",["189","190"],"import React, { Component } from \"react\";\nimport apiHandler from \"../../api/apiHandler\";\nimport CreateCall from \"../Calls/CreateCall\";\nimport EditCall from \"../Calls/EditCall\";\nimport { withRouter } from \"react-router-dom\";\nimport { UserContext } from \"../../components/Auth/UserContext\";\n\nclass OneContact extends Component {\n  static contextType = UserContext;\n\n  state = {\n    contact: null,\n    addCall: \"\",\n    calls: [],\n    isCall: \"\",\n    lastcall: \"\",\n    volunteers: [],\n    add: \"\",\n    histo: [],\n    institution: {},\n  };\n\n  componentDidMount() {\n    window.scrollTo(0, 0);\n    apiHandler\n      .getOne(\"/api/contacts/\", this.props.match.params.id)\n      .then((apiRes) => {\n        this.setState({ contact: apiRes.data });\n        this.buildCalls(apiRes.data.calls);\n        if (apiRes.data.institution)\n          this.buildInstitution(apiRes.data.institution);\n        if (apiRes.data.histo) this.formatHisto(apiRes.data.histo);\n        if (apiRes.data.volunteers) this.getVolunteer(apiRes.data.volunteers);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  buildInstitution = (data) => {\n    apiHandler\n      .getOne(\"/api/institutions/\", data)\n      .then((apiRes) => {\n        this.setState({ institution: apiRes.data });\n      })\n      .catch((apiErr) => {\n        console.log(apiErr);\n      });\n  };\n\n  buildCalls = (data) => {\n    for (const [index, item] of data.entries()) {\n      apiHandler\n        .getOne(\"/api/calls/\", item.call)\n        .then((apiRes) => {\n          const copyCalls = [...this.state.calls];\n          copyCalls.unshift(apiRes.data);\n\n          this.setState({ calls: copyCalls });\n          apiHandler\n            .getOne(\"/api/calls/\", item.call)\n            .then((apiRes) => {})\n            .catch((apiErr) => {\n              console.log(apiErr);\n            });\n        })\n        .catch((apiErr) => {\n          console.log(apiErr);\n        });\n    }\n  };\n\n  addCallid = (call) => {\n    if (call.call.empty === false) {\n      this.setState({ lastcall: Date.now() });\n\n      apiHandler\n        .updateOne(\"/api/contacts/\" + this.props.match.params.id, {\n          needcall: false,\n          lastcall: this.state.lastcall,\n          $push: { calls: { call: call.call._id } },\n        })\n        .then((apiRes) =>\n          apiHandler\n            .getOne(\"/api/contacts/\", this.props.match.params.id)\n            .then((apiRes) => {\n              this.setState({ addCall: \"\", calls: [], contact: apiRes.data });\n              this.buildCalls(apiRes.data.calls);\n            })\n            .catch((error) => {\n              console.log(error);\n            })\n        )\n\n        .catch((apiErr) => console.log(apiErr));\n    } else {\n      apiHandler\n        .updateOne(\"/api/contacts/\" + this.props.match.params.id, {\n          $push: { calls: { call: call.call._id } },\n        })\n        .then((apiRes) =>\n          apiHandler\n            .getOne(\"/api/contacts/\", this.props.match.params.id)\n            .then((apiRes) => {\n              this.setState({ addCall: \"\", calls: [], contact: apiRes.data });\n              this.buildCalls(apiRes.data.calls);\n            })\n            .catch((error) => {\n              console.log(error);\n            })\n        )\n\n        .catch((apiErr) => console.log(apiErr));\n    }\n  };\n\n  updateCallId = (call) => {\n    this.setState({ calls: \"\", addCall: \"\" });\n\n    apiHandler\n      .getOne(\"/api/contacts/\", this.props.match.params.id)\n      .then((apiRes) => {\n        this.buildCalls(apiRes.data.calls);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  addCall = (event) => {\n    this.setState({\n      addCall: (\n        <CreateCall\n          handleCall={this.addCallid}\n          contact={this.props.match.params.id}\n        />\n      ),\n    });\n  };\n\n  updateCall = (id) => {\n    this.setState({\n      addCall: (\n        <EditCall\n          id={id}\n          handleCall={this.updateCallId}\n          contact={this.props.match.params.id}\n        />\n      ),\n    });\n  };\n\n  addVolunteer = (event) => {\n    apiHandler\n      .updateOne(\"/api/contacts/\" + this.props.match.params.id, {\n        $push: { volunteers: { volunteer: this.context.user._id } },\n      })\n      .then((apiRes) =>\n        apiHandler\n          .updateOne(\"/api/users/\" + this.context.user._id, {\n            $push: { contacts: { contact: this.props.match.params.id } },\n          })\n          .then((apiRes) => {\n            apiHandler\n              .getOne(\"/api/contacts/\", this.props.match.params.id)\n              .then((apiRes) => {\n                // console.log(apiRes);\n                this.setState({ contact: apiRes.data });\n                this.getVolunteer(apiRes.data.volunteers);\n              })\n              .catch((error) => {\n                console.log(error);\n              });\n          })\n          .catch((error) => {\n            console.log(error);\n          })\n      )\n\n      .catch((apiErr) => console.log(apiErr));\n    // this.setState({ [name]: value, creator: this.context.user._id });\n  };\n\n  getVolunteer = (data) => {\n    const volunteersArr = [];\n    this.setState({ volunteers: [] });\n    for (const [index, item] of data.entries()) {\n      apiHandler\n        .getOne(\"/api/users/\", item.volunteer)\n        .then((apiRes) => {\n          // console.log(apiRes.data.email);\n          volunteersArr.push(apiRes.data.email);\n          this.setState({ volunteers: volunteersArr });\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  };\n\n  removeVolunteer = (event) => {\n    apiHandler\n      .updateOne(\"/api/contacts/\" + this.props.match.params.id, {\n        $pull: { volunteers: { volunteer: this.context.user._id } },\n      })\n      .then((apiRes) => {\n        this.setState({ contact: apiRes.data });\n        this.getVolunteer(apiRes.data.volunteers);\n        apiHandler\n          .updateOne(\"/api/users/\" + this.context.user._id, {\n            $pull: { contacts: { contact: this.props.match.params.id } },\n          })\n          .then((apiRes) => {})\n\n          .catch((apiErr) => console.log(apiErr));\n      })\n\n      .catch((apiErr) => console.log(apiErr));\n  };\n\n  formatDate(date) {\n    const getDate = date.split(\"T\")[0].split(\"-\");\n    const formatedDate = `${getDate[2]}/${getDate[1]}/${getDate[0]}`;\n    // return `${date[2]}-${date[1]}-${date[0]}`;\n    return formatedDate;\n  }\n\n  formatHisto(histo) {\n    const histArr = [];\n    for (const i of histo.split(\"***\")) {\n      histArr.unshift([i.split(\"[\")]);\n    }\n    this.setState({ histo: histArr });\n  }\n\n  deleteCall(id) {\n    apiHandler\n      .deleteOne(\"/api/calls/\", id)\n      .then((apiRes) => this.componentDidMount())\n      .catch((apiErr) => console.log(apiErr));\n  }\n\n\n  render() {\n    if (!this.state.contact) {\n      return <div>Loading</div>;\n    }\n    return (\n      <div className=\"container\">\n        <div className=\"contact\">\n          <div className=\"contact-info\">\n            <div className=\"contact-bio\">\n              <h2>{this.state.contact.name}</h2>\n              <h4>\n                <i className=\"fas fa-phone\"></i> /{\" \"}\n                <i className=\"fas fa-envelope\"></i> :{\" \"}\n                {this.state.contact.contact}\n              </h4>\n              <div className=\"contact-institution\">\n                <p>{this.state.institution.name}</p>\n                <p>\n                  {this.state.institution.postal_code}&nbsp;\n                  {this.state.institution.city}{\" \"}\n                  {this.state.institution.departement}\n                </p>\n              </div>\n            </div>\n            <div className=\"contact-details\">\n              <h4>Fréquence de contact : {this.state.contact.frequency}</h4>\n              {this.state.contact.comment ? (\n                <p>{this.state.contact.comment}</p>\n              ) : (\n                \"\"\n              )}\n              <ul>\n                {this.state.contact.volunteer_1 ||\n                this.state.contact.volunteer_2 ||\n                this.state.volunteers.length > 0 ? (\n                  <h4 style={{ marginTop: \"10px\" }}>Bénévole(s)</h4>\n                ) : (\n                  <p style={{ marginTop: \"10px\" }}>\n                    Il n'y a aucun·e bénévole en contact régulier avec{\" \"}\n                    {this.state.contact.name}\n                  </p>\n                )}\n                <li>\n                  {this.state.contact.volunteer_1 ? (\n                    <>\n                      {\" \"}\n                      <i\n                        style={{ marginRight: \"8px\" }}\n                        className=\"fas fa-user\"\n                      ></i>\n                      {this.state.contact.volunteer_1}\n                    </>\n                  ) : (\n                    \"\"\n                  )}\n                </li>\n                <li>\n                  {this.state.contact.volunteer_2 ? (\n                    <>\n                      {\" \"}\n                      <i\n                        style={{ marginRight: \"8px\" }}\n                        className=\"fas fa-user\"\n                      ></i>\n                      {this.state.contact.volunteer_2}\n                    </>\n                  ) : (\n                    \"\"\n                  )}\n                </li>\n                {this.state.volunteers.map((volunteer) => (\n                  <li key={volunteer}>\n                    <i\n                      style={{ marginRight: \"8px\" }}\n                      className=\"fas fa-user\"\n                    ></i>{\" \"}\n                    {volunteer.split(\"@\")[0]}{\" \"}\n                    {volunteer === this.context.user.email ? (\n                      <span\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() => this.removeVolunteer()}\n                      >\n                        (me désabonner)\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </li>\n                ))}\n              </ul>\n              {this.state.volunteers.includes(this.context.user.email) ? (\n                \"\"\n              ) : (\n                <span\n                  style={{ marginTop: \"10px\" }}\n                  className=\"btn small\"\n                  onClick={() => this.addVolunteer()}\n                >\n                  Devenir un contact régulier\n                </span>\n              )}\n            </div>\n          </div>\n          <div className=\"contact-histo\">\n            <h3 className=\"date-call\" style={{ marginBottom: \"10px\" }}>\n              Dernier contact :{\" \"}\n              {this.state.contact.lastcall\n                ? this.formatDate(this.state.contact.lastcall)\n                : \"aucun contact n'a encore eu lieu\"}\n            </h3>\n            <span className=\"btn red\" onClick={() => this.addCall()}>\n              {\" \"}\n              Ajouter un appel\n            </span>\n            <div>{this.state.addCall}</div>\n            <h3 style={{ marginTop: \"10px\" }}>Historique des appels</h3>\n            <div className=\"histo-lists\">\n              {this.state.calls &&\n                this.state.calls.map((call) => (\n                  <div style={{ marginBottom: \"20px\" }} key={call._id}>\n                    <h4>\n                      {this.formatDate(call.created)}{\" \"}\n                      {call.empty === true ? \"(pas de réponse)\" : \"\"}\n                    </h4>\n                    <div>Bénévole : {call.creator.split(\"@\")[0]}</div>\n                    {call.empty === true ? (\n                      \"\"\n                    ) : (\n                      <>\n                        <div>Durée : {call.last}</div>\n                        <div>Commentaire : {call.comment}</div>\n                      </>\n                    )}\n\n                    <div>\n                      {\" \"}\n                      {call.creator === this.context.user.email ||\n                      this.context.user.isMob === true ? (\n                        <>\n                          <span\n                            style={{ cursor: \"pointer\", marginRight:\"6px\" }}\n                            onClick={() => this.updateCall(call._id)}\n                          >\n                            Editer <i className=\"far fa-edit\"></i>\n                          </span>\n                          {/* <span\n                            style={{ cursor: \"pointer\" }}\n                            onClick={() => this.deleteCall(call._id)}\n                          >\n                            Supprimer <i className=\"fas fa-backspace\"></i>\n                          </span> */}\n                        </>\n                      ) : (\n                        \"\"\n                      )}\n                    </div>\n                  </div>\n                ))}\n              {this.state.histo.map((onecall) => (\n                <div className=\"histo-box\" key={onecall}>\n                  {onecall.map((calldetail) => (\n                    <div key={calldetail}>\n                      <h4>{calldetail[0]}</h4>\n                      <p>{calldetail[1]}</p>\n                      <p>{calldetail[2]}</p>\n                      <p>{calldetail[3]}</p>\n                      <p>{calldetail[4]}</p>\n                      <p>{calldetail[5]}</p>\n                    </div>\n                  ))}\n                  <br />\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(OneContact);\n","/home/pheno/Documents/makesense/client/src/pages/Institutions/Institutions.jsx",["191"],"import React, { Component } from \"react\";\nimport apiHandler from \"../../api/apiHandler\";\nimport { Link } from \"react-router-dom\";\nimport SearchBar from \"../../components/Forms/SearchBar\";\n\nclass Institutions extends Component {\n  state = {\n    institutions: [],\n    searchInstitutions: [],\n    departement: \"Ain\",\n  };\n\n  componentDidMount() {\n    apiHandler\n      .getAll(\"/api/institutions\")\n      .then((apiRes) => {\n        this.setState({\n          institutions: apiRes.data,\n          searchInstitutions: apiRes.data,\n        });\n      })\n      .catch((apiErr) => {\n        console.log(apiErr);\n      });\n  }\n\n  deleteOne(id) {\n    apiHandler\n      .deleteOne(\"/api/institutions/\", id)\n      .then((apiRes) => this.componentDidMount())\n      .catch((apiErr) => console.log(apiErr));\n  }\n\n  handleChange = (event) => {\n    // const name = event.target.name;\n    const value = event.target.value;\n\n    this.setState({\n      departement: value,\n    });\n  };\n\n  search = (searchInstitution) => {\n    const copyInstitutions = [...this.state.institutions];\n\n    const filteredInstitutions = copyInstitutions.filter((institution) =>\n      institution.name\n        .toLowerCase()\n        .includes(searchInstitution.search.toLowerCase())\n    );\n    this.setState({ searchInstitutions: filteredInstitutions });\n  };\n\n  render() {\n    if (!this.state.institutions) {\n      return <div>Loading</div>;\n    }\n\n    const filteredDep = this.state.searchInstitutions.filter(\n      (institution) => institution.departement === this.state.departement\n    );\n    // const depList  = [...new Set(array)];\n\n    // const depArr = [];\n    // for (const [index, item] of this.state.institutions.entries()) {\n    //   depArr.push(item.departement);\n    // }\n\n    const depList = [\n      \"Ain\",\n      \"Aisne\",\n      \"Allier\",\n      \"Alpes-de-Haute-Provence\",\n      \"Hautes-Alpes\",\n      \"Alpes-Maritimes\",\n      \"Ardèche\",\n      \"Ardennes\",\n      \"Ariège\",\n      \"Aube\",\n      \"Aude\",\n      \"Aveyron\",\n      \"Bouches-du-Rhône\",\n      \"Calvados\",\n      \"Cantal\",\n      \"Charente\",\n      \"Charente-Maritime\",\n      \"Cher\",\n      \"Corrèze\",\n      \"Corse\",\n      \"Côte-d'Or\",\n      \"Côtes-d'Armor\",\n      \"Creuse\",\n      \"Dordogne\",\n      \"Gironde\",\n      \"Doubs\",\n      \"Drôme\",\n      \"Eure\",\n      \"Eure-et-Loir\",\n      \"Finistère\",\n      \"Gard\",\n      \"Haute-Garonne\",\n      \"Gers\",\n      \"Hérault\",\n      \"Ille-et-Vilaine\",\n      \"Indre\",\n      \"Indre-et-Loire\",\n      \"Isère\",\n      \"Jura\",\n      \"Landes\",\n      \"Loir-et-Cher\",\n      \"Loire\",\n      \"Haute-Loire\",\n      \"Loire-Atlantique\",\n      \"Loiret\",\n      \"Lot\",\n      \"Lot-et-Garonne\",\n      \"Lozère\",\n      \"Maine-et-Loire\",\n      \"Manche\",\n      \"Marne\",\n      \"Haute-Marne\",\n      \"Mayenne\",\n      \"Meurthe-et-Moselle\",\n      \"Meuse\",\n      \"Morbihan\",\n      \"Moselle\",\n      \"Nièvre\",\n      \"Nord\",\n      \"Oise\",\n      \"Orne\",\n      \"Pas-de-Calais\",\n      \"Puy-de-Dôme\",\n      \"Pyrénées-Atlantiques\",\n      \"Hautes-Pyrénées\",\n      \"Pyrénées-Orientales\",\n      \"Bas-Rhin\",\n      \"Haut-Rhin\",\n      \"Rhône\",\n      \"Haute-Saône\",\n      \"Saône-et-Loire\",\n      \"Sarthe\",\n      \"Savoie\",\n      \"Haute-Savoie\",\n      \"Paris\",\n      \"Seine-Maritime\",\n      \"Seine-et-Marne\",\n      \"Yvelines\",\n      \"Deux-Sèvres\",\n      \"Somme\",\n      \"Tarn\",\n      \"Tarn-et-Garonne\",\n      \"Var\",\n      \"Vaucluse\",\n      \"Vendée\",\n      \"Vienne\",\n      \"Haute-Vienne\",\n      \"Vosges\",\n      \"Yonne\",\n      \"Territoire de Belfort\",\n      \"Essonne\",\n      \"Hauts-de-Seine\",\n      \"Seine-St-Denis\",\n      \"Val-de-Marne\",\n      \"Val-D'Oise\",\n      \"Guadeloupe\",\n      \"Martinique\",\n      \"Guyane\",\n      \"La Réunion\",\n    ];\n\n    return (\n      <div className=\"page institutions\">\n        <h1>Les établissements</h1>\n        <Link\n          style={{ marginBottom: \"40px\" }}\n          className=\"btn red\"\n          to={\"/institutions/create\"}\n        >\n          Ajouter un établissement\n        </Link>\n        <div style={{ marginBottom: \"20px\" }}>\n          <label className=\"label\" htmlFor=\"departement\">\n            Département :&nbsp;\n          </label>\n\n          <select\n            id=\"departement\"\n            defautvalue={\"Ain\"}\n            name=\"departement\"\n            onChange={this.handleChange}\n          >\n            {depList.map((dep) => (\n              <option key={dep} value={dep}>\n                {dep}\n              </option>\n            ))}\n          </select>\n        </div>\n        <SearchBar handleSearch={this.search} type=\"établissement\"/>\n        <table>\n          <thead>\n            <tr>\n              <th scope=\"col\">Code établissement</th>\n              <th scope=\"col\">Type</th>\n              <th scope=\"col\">Nom</th>\n              <th scope=\"col\">Groupe</th>\n              <th scope=\"col\">CP</th>\n              <th scope=\"col\">Ville</th>\n              <th scope=\"col\">Département</th>\n              <th scope=\"col\">Editer</th>\n              <th scope=\"col\">Supprimer</th>\n            </tr>\n          </thead>\n          <tbody>\n            {filteredDep.map((institution) => (\n              <tr key={institution._id}>\n                <td scope=\"row\" data-label=\"Code\">\n                  {institution.code}\n                </td>\n                <td data-label=\"Type\">{institution.type}</td>\n                <td data-label=\"Nom\">{institution.name}</td>\n                <td data-label=\"Groupe\">{institution.groupe}</td>\n                <td data-label=\"Code postale\">{institution.postal_code}</td>\n                <td data-label=\"Ville\">{institution.city}</td>\n                <td data-label=\"Département\">{institution.departement}</td>\n                <td data-label=\"Editer\">\n                  <Link to={`/institutions/${institution._id}/edit`}>\n                    <i className=\"fas fa-edit\"></i>\n                  </Link>\n                </td>\n                <td data-label=\"Supprimer\">\n                  <Link\n                    to={this.props}\n                    onClick={() => this.deleteOne(institution._id)}\n                  >\n                    <i className=\"fas fa-backspace\"></i>\n                  </Link>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Institutions;\n","/home/pheno/Documents/makesense/client/src/pages/Institutions/OneInstitution.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Users/CreateUser.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Users/EditUser.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Contacts/Mycontacts.jsx",["192","193"],"import React, { Component } from \"react\";\nimport apiHandler from \"../../api/apiHandler.js\";\nimport { UserContext } from \"../../components/Auth/UserContext\";\nimport { Link } from \"react-router-dom\";\nimport SearchBar from \"../../components/Forms/SearchBar\";\n\nclass Mycontacts extends Component {\n  static contextType = UserContext;\n\n  state = {\n    mycontacts: [],\n  };\n\n  componentDidMount() {\n    apiHandler\n      .getOne(\"/api/users/\", this.context.user._id)\n      .then((apiRes) => {\n        // console.log(\"fdsfds\");\n        // this.setState({ mycontacts: apiRes.data.contacts });\n        this.getContacts(apiRes.data.contacts);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  getContacts = (data) => {\n    const contactsArr = [];\n    for (const [index, item] of data.entries()) {\n      // console.log(item.contact);\n      apiHandler\n        .getOne(\"/api/contacts/\", item.contact)\n        .then((apiRes) => {\n          // console.log(apiRes.data);\n          contactsArr.push(apiRes.data);\n          this.setState({ mycontacts: contactsArr });\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  };\n\n  formatDate(date) {\n    const getDate = date.split(\"T\")[0].split(\"-\");\n    const formatedDate = `${getDate[2]}-${getDate[1]}-${getDate[0]}`;\n    // return `${date[2]}-${date[1]}-${date[0]}`;\n    return formatedDate;\n  }\n\n  search = (searchContact) => {\n    return null;\n  };\n\n  render() {\n    return (\n      <div className=\"contacts-mycontacts\">\n        <h3 style={{ marginBottom: \"10px\", color: \"#e36164\" }}>Mes contacts</h3>\n        <SearchBar handleSearch={this.search} type=\"contact\" />\n        <table>\n          <thead>\n            <tr>\n              <th scope=\"col\">Nom</th>\n              <th scope=\"col\">Dernier appel</th>\n              <th scope=\"col\">Fréquence d'appel</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.mycontacts.map((contact) => (\n              <tr key={contact._id}>\n                <td scope=\"row\" data-label=\"Nom\">\n                  <Link to={`/contacts/${contact._id}/`}>{contact.name}</Link>\n                </td>\n                <td data-label=\"Dernier Appel\">\n                  <Link to={`/contacts/${contact._id}/`}>\n                    {contact.lastcall\n                      ? this.formatDate(contact.lastcall)\n                      : \"never\"}\n                  </Link>\n                </td>\n                <td data-label=\"Fréquence d'appel\">\n                  <Link to={`/contacts/${contact._id}/`}>\n                    {contact.frequency}\n                  </Link>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Mycontacts;\n","/home/pheno/Documents/makesense/client/src/components/Forms/FormSignup.jsx",[],"/home/pheno/Documents/makesense/client/src/components/Forms/SearchBar.jsx",[],"/home/pheno/Documents/makesense/client/src/components/ProtectedRoute.jsx",[],"/home/pheno/Documents/makesense/client/src/components/ProtectedAdminRoute.jsx",[],"/home/pheno/Documents/makesense/client/src/components/Forms/FormContact.jsx",[],"/home/pheno/Documents/makesense/client/src/api/apiHandler.js",["194"],"import axios from \"axios\";\n\nconst service = axios.create({\n  baseURL: process.env.REACT_APP_BACKEND_URL,\n  withCredentials: true, // Cookie is sent to client when using this service. (used for session)\n});\n\nfunction errorHandler(error) {\n  if (error.response.data) {\n    console.log(error.response && error.response.data);\n    throw error;\n  }\n  throw error;\n}\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  service,\n\n  signup(userInfo) {\n    return service\n      .post(\"/api/auth/signup\", userInfo)\n      .then((res) => res.data)\n      .catch(errorHandler);\n  },\n\n  signin(userInfo) {\n    return service\n      .post(\"/api/auth/signin\", userInfo)\n      .then((res) => res.data)\n      .catch(errorHandler);\n  },\n\n  isLoggedIn() {\n    return service\n      .get(\"/api/auth/isLoggedIn\")\n      .then((res) => res.data)\n      .catch(errorHandler);\n  },\n\n  logout() {\n    return service\n      .get(\"/api/auth/logout\")\n      .then((res) => res.data)\n      .catch(errorHandler);\n  },\n\n  /*   getItems() {\n    return service\n      .get(\"/api/items\")\n      .then((res) => res.data)\n      .catch(errorHandler);\n  }, */\n\n  getAll(endPoint) {\n    return service.get(endPoint);\n  },\n\n  getOne(endPoint, id) {\n    return service.get(endPoint + id);\n  },\n\n  createOne(endPoint, data) {\n    return service.post(endPoint, data);\n  },\n\n  updateOne(endPoint, data) {\n    return service.patch(endPoint, data);\n  },\n\n  deleteOne(endPoint, id) {\n    return service.delete(endPoint + id);\n  },\n};\n","/home/pheno/Documents/makesense/client/src/components/Auth/withUser.jsx",[],"/home/pheno/Documents/makesense/client/src/components/Auth/UserProvider.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Users/Users.jsx",["195","196","197"],"/home/pheno/Documents/makesense/client/src/pages/Users/Volunteers.jsx",["198"],"/home/pheno/Documents/makesense/client/src/components/Forms/FormVolunteer.jsx",[],{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"199","replacedBy":"203"},{"ruleId":"201","replacedBy":"204"},{"ruleId":"199","replacedBy":"205"},{"ruleId":"201","replacedBy":"206"},{"ruleId":"207","severity":1,"message":"208","line":25,"column":17,"nodeType":"209","messageId":"210","endLine":25,"endColumn":22},{"ruleId":"211","severity":1,"message":"212","line":141,"column":21,"nodeType":"213","endLine":141,"endColumn":32},{"ruleId":"199","replacedBy":"214"},{"ruleId":"201","replacedBy":"215"},{"ruleId":"207","severity":1,"message":"216","line":2,"column":10,"nodeType":"209","messageId":"210","endLine":2,"endColumn":14},{"ruleId":"211","severity":1,"message":"212","line":114,"column":21,"nodeType":"213","endLine":114,"endColumn":32},{"ruleId":"207","severity":1,"message":"208","line":25,"column":17,"nodeType":"209","messageId":"210","endLine":25,"endColumn":22},{"ruleId":"217","severity":1,"message":"218","line":93,"column":22,"nodeType":"219","messageId":"220","endLine":93,"endColumn":24},{"ruleId":"211","severity":1,"message":"212","line":142,"column":21,"nodeType":"213","endLine":142,"endColumn":32},{"ruleId":"211","severity":1,"message":"212","line":111,"column":21,"nodeType":"213","endLine":111,"endColumn":32},{"ruleId":"207","severity":1,"message":"208","line":52,"column":17,"nodeType":"209","messageId":"210","endLine":52,"endColumn":22},{"ruleId":"207","severity":1,"message":"208","line":187,"column":17,"nodeType":"209","messageId":"210","endLine":187,"endColumn":22},{"ruleId":"211","severity":1,"message":"212","line":217,"column":21,"nodeType":"213","endLine":217,"endColumn":32},{"ruleId":"207","severity":1,"message":"208","line":29,"column":17,"nodeType":"209","messageId":"210","endLine":29,"endColumn":22},{"ruleId":"211","severity":1,"message":"212","line":71,"column":21,"nodeType":"213","endLine":71,"endColumn":32},{"ruleId":"221","severity":1,"message":"222","line":16,"column":1,"nodeType":"223","endLine":73,"endColumn":3},{"ruleId":"207","severity":1,"message":"208","line":64,"column":17,"nodeType":"209","messageId":"210","endLine":64,"endColumn":22},{"ruleId":"211","severity":1,"message":"212","line":100,"column":25,"nodeType":"213","endLine":100,"endColumn":36},{"ruleId":"211","severity":1,"message":"212","line":141,"column":25,"nodeType":"213","endLine":141,"endColumn":36},{"ruleId":"211","severity":1,"message":"212","line":73,"column":23,"nodeType":"213","endLine":73,"endColumn":34},"no-native-reassign",["224"],"no-negated-in-lhs",["225"],["224"],["225"],["224"],["225"],"no-unused-vars","'index' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/scope","The scope prop can only be used on <th> elements.","JSXAttribute",["224"],["225"],"'Link' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]