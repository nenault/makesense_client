[{"/home/pheno/Documents/makesense/client/src/index.js":"1","/home/pheno/Documents/makesense/client/src/pages/Signin.jsx":"2","/home/pheno/Documents/makesense/client/src/pages/Signup.jsx":"3","/home/pheno/Documents/makesense/client/src/pages/Contacts/EditContact.jsx":"4","/home/pheno/Documents/makesense/client/src/pages/Institutions/EditInstitution.jsx":"5","/home/pheno/Documents/makesense/client/src/pages/Calls/CreateCall.jsx":"6","/home/pheno/Documents/makesense/client/src/pages/Calls/Calls.jsx":"7","/home/pheno/Documents/makesense/client/src/pages/Calls/EditCall.jsx":"8","/home/pheno/Documents/makesense/client/src/components/Auth/UserContext.jsx":"9","/home/pheno/Documents/makesense/client/src/pages/Contacts/NeedWriteContacts.jsx":"10","/home/pheno/Documents/makesense/client/src/components/Forms/FormInstitution.jsx":"11","/home/pheno/Documents/makesense/client/src/pages/Home.jsx":"12","/home/pheno/Documents/makesense/client/src/components/NavMain.jsx":"13","/home/pheno/Documents/makesense/client/src/pages/Contacts/ActiveContacts.jsx":"14","/home/pheno/Documents/makesense/client/src/pages/Contacts/NeedCallContacts.jsx":"15","/home/pheno/Documents/makesense/client/src/App.jsx":"16","/home/pheno/Documents/makesense/client/src/pages/Contacts/InactiveContacts.jsx":"17","/home/pheno/Documents/makesense/client/src/components/Forms/FormSignin.jsx":"18","/home/pheno/Documents/makesense/client/src/components/Forms/FormCall.jsx":"19","/home/pheno/Documents/makesense/client/src/pages/Profile.jsx":"20","/home/pheno/Documents/makesense/client/src/pages/Contacts/Contacts.jsx":"21","/home/pheno/Documents/makesense/client/src/pages/Contacts/CreateContact.jsx":"22","/home/pheno/Documents/makesense/client/src/pages/Institutions/CreateInstitution.jsx":"23","/home/pheno/Documents/makesense/client/src/pages/Contacts/OneContact.jsx":"24","/home/pheno/Documents/makesense/client/src/pages/Institutions/Institutions.jsx":"25","/home/pheno/Documents/makesense/client/src/pages/Institutions/OneInstitution.jsx":"26","/home/pheno/Documents/makesense/client/src/pages/Users/CreateUser.jsx":"27","/home/pheno/Documents/makesense/client/src/pages/Users/EditUser.jsx":"28","/home/pheno/Documents/makesense/client/src/pages/Contacts/Mycontacts.jsx":"29","/home/pheno/Documents/makesense/client/src/components/Forms/FormSignup.jsx":"30","/home/pheno/Documents/makesense/client/src/components/Forms/SearchBar.jsx":"31","/home/pheno/Documents/makesense/client/src/components/ProtectedRoute.jsx":"32","/home/pheno/Documents/makesense/client/src/components/ProtectedAdminRoute.jsx":"33","/home/pheno/Documents/makesense/client/src/components/Forms/FormContact.jsx":"34","/home/pheno/Documents/makesense/client/src/api/apiHandler.js":"35"},{"size":401,"mtime":1606566172595,"results":"36","hashOfConfig":"37"},{"size":165,"mtime":1604927652591,"results":"38","hashOfConfig":"37"},{"size":165,"mtime":1604927652591,"results":"39","hashOfConfig":"37"},{"size":271,"mtime":1605607226743,"results":"40","hashOfConfig":"37"},{"size":271,"mtime":1606214655530,"results":"41","hashOfConfig":"37"},{"size":411,"mtime":1605785776677,"results":"42","hashOfConfig":"37"},{"size":131,"mtime":1605006861899,"results":"43","hashOfConfig":"37"},{"size":465,"mtime":1605607869835,"results":"44","hashOfConfig":"37"},{"size":78,"mtime":1604927652591,"results":"45","hashOfConfig":"37"},{"size":4897,"mtime":1606403283832,"results":"46","hashOfConfig":"37"},{"size":7785,"mtime":1606300238829,"results":"47","hashOfConfig":"37"},{"size":1849,"mtime":1606404420315,"results":"48","hashOfConfig":"37"},{"size":2098,"mtime":1606304956956,"results":"49","hashOfConfig":"37"},{"size":4727,"mtime":1606560389456,"results":"50","hashOfConfig":"37"},{"size":5162,"mtime":1606403279468,"results":"51","hashOfConfig":"37"},{"size":2888,"mtime":1605432127025,"results":"52","hashOfConfig":"37"},{"size":4474,"mtime":1606403251577,"results":"53","hashOfConfig":"37"},{"size":2160,"mtime":1606399858020,"results":"54","hashOfConfig":"37"},{"size":3883,"mtime":1606586113060,"results":"55","hashOfConfig":"37"},{"size":173,"mtime":1605438246268,"results":"56","hashOfConfig":"37"},{"size":1118,"mtime":1606296601606,"results":"57","hashOfConfig":"37"},{"size":225,"mtime":1605027776385,"results":"58","hashOfConfig":"37"},{"size":229,"mtime":1606214532804,"results":"59","hashOfConfig":"37"},{"size":13444,"mtime":1606586462232,"results":"60","hashOfConfig":"37"},{"size":6253,"mtime":1606403181748,"results":"61","hashOfConfig":"37"},{"size":149,"mtime":1605006951631,"results":"62","hashOfConfig":"37"},{"size":141,"mtime":1605008991668,"results":"63","hashOfConfig":"37"},{"size":137,"mtime":1605009008363,"results":"64","hashOfConfig":"37"},{"size":2762,"mtime":1606404763091,"results":"65","hashOfConfig":"37"},{"size":2037,"mtime":1606399932142,"results":"66","hashOfConfig":"37"},{"size":764,"mtime":1606557266268,"results":"67","hashOfConfig":"37"},{"size":463,"mtime":1604927652591,"results":"68","hashOfConfig":"37"},{"size":456,"mtime":1605432058481,"results":"69","hashOfConfig":"37"},{"size":5844,"mtime":1606300221074,"results":"70","hashOfConfig":"37"},{"size":1445,"mtime":1606329390254,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"139fx7f",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"87"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"74"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"87"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"107"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/pheno/Documents/makesense/client/src/index.js",[],["155","156"],"/home/pheno/Documents/makesense/client/src/pages/Signin.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Signup.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Contacts/EditContact.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Institutions/EditInstitution.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Calls/CreateCall.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Calls/Calls.jsx",[],["157","158"],"/home/pheno/Documents/makesense/client/src/pages/Calls/EditCall.jsx",[],"/home/pheno/Documents/makesense/client/src/components/Auth/UserContext.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Contacts/NeedWriteContacts.jsx",["159","160"],"import React, { Component } from \"react\";\nimport apiHandler from \"../../api/apiHandler\";\nimport { Link } from \"react-router-dom\";\nimport SearchBar from \"../../components/Forms/SearchBar\";\n\nclass NeedWriteContacts extends Component {\n  state = {\n    contacts: [],\n    searchContacts: [],\n  };\n\n  componentDidMount() {\n    apiHandler\n      .getAll(\"/api/contacts\")\n      .then((apiRes) => {\n        this.getNeedWriteContacts(apiRes.data)\n        this.isCallNeeded();\n      })\n      .catch((apiErr) => {\n        console.log(apiErr);\n      });\n  }\n\n  isCallNeeded() {\n    for (const [index, item] of this.state.contacts.entries()) {\n      if (item.lastcall) {\n        let lastcall = new Date(item.lastcall);\n        let today = new Date();\n\n        let dateDiff = lastcall.getTime() - today.getTime();\n        let days = Math.ceil(dateDiff / (1000 * 3600 * 24));\n        // console.log(days);\n\n        if (item.frequency === \"Chaque jour\" && days === -1) {\n          apiHandler\n            .updateOne(\"/api/contacts/\" + item._id, {\n              needcall: true,\n            })\n            .then((apiRes) =>\n              apiHandler\n                .getAll(\"/api/contacts\")\n                .then((apiRes) => {\n                  this.getNeedWriteContacts(apiRes.data);\n                })\n                .catch((apiErr) => {\n                  console.log(apiErr);\n                })\n            )\n            .catch((apiErr) => console.log(apiErr));\n        } else if (item.frequency === \"2 fois par semaine\" && days === -3) {\n          apiHandler\n            .updateOne(\"/api/contacts/\" + item._id, {\n              needcall: true,\n            })\n            .then((apiRes) =>\n              apiHandler\n                .getAll(\"/api/contacts\")\n                .then((apiRes) => {\n                  this.getNeedWriteContacts(apiRes.data);\n                })\n                .catch((apiErr) => {\n                  console.log(apiErr);\n                })\n            )\n            .catch((apiErr) => console.log(apiErr));\n        } else if (item.frequency === \"1 fois par semaine\" && days === -7) {\n          apiHandler\n            .updateOne(\"/api/contacts/\" + item._id, {\n              needcall: true,\n            })\n            .then((apiRes) =>\n              apiHandler\n                .getAll(\"/api/contacts\")\n                .then((apiRes) => {\n                  this.getNeedWriteContacts(apiRes.data);\n                })\n                .catch((apiErr) => {\n                  console.log(apiErr);\n                })\n            )\n            .catch((apiErr) => console.log(apiErr));\n        }\n      }\n    }\n  }\n\n  getNeedWriteContacts(contacts) {\n    const needWriteContacts = contacts.filter(\n      (contact) => contact.type === \"eMail\" && contact.isActive === true\n    );\n    this.setState({\n      contacts: needWriteContacts,\n      searchContacts: needWriteContacts,\n    });\n  }\n\n  formatDate(date) {\n    const getDate = date.split(\"T\")[0].split(\"-\");\n    const formatedDate = `${getDate[2]}-${getDate[1]}-${getDate[0]}`;\n    // return `${date[2]}-${date[1]}-${date[0]}`;\n    return formatedDate;\n  }\n\n  search = (searchContact) => {\n    const copyContacts = [...this.state.contacts];\n\n    // return product.name.toLowerCase().includes(props.name.toLowerCase())\n\n    const filteredContacts = copyContacts.filter((contact) =>\n      contact.name.toLowerCase().includes(searchContact.search.toLowerCase())\n    );\n    this.setState({ searchContacts: filteredContacts });\n  };\n\n  render() {\n    if (!this.state.contacts) {\n      return <div>Loading</div>;\n    }\n    return (\n      <div className=\"contacts-needwrite\">\n        <h3 style={{ marginBottom: \"10px\", color: \"#e36164\" }}>\n          {this.state.searchContacts.length} contact\n          {this.state.searchContacts.length > 1 ? \"s\" : \"\"} attend\n          {this.state.searchContacts.length > 1 ? \"ent\" : \"\"} nos mails\n        </h3>\n        <SearchBar handleSearch={this.search} type=\"contact\"/>\n        <table>\n          <thead>\n            <tr>\n              <th scope=\"col\">Nom</th>\n              <th scope=\"col\">\n                Dernier\n                <br />\n                mail\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.searchContacts.map((contact) => (\n              <tr key={contact._id}>\n                <td scope=\"row\" data-label=\"Nom\">\n                  <Link to={`/contacts/${contact._id}/`}>{contact.name}</Link>\n                </td>\n                <td data-label=\"Dernier mail\">\n                  <Link to={`/contacts/${contact._id}/`}>\n                    {\" \"}\n                    {contact.lastcall\n                      ? this.formatDate(contact.lastcall)\n                      : \"never\"}\n                  </Link>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default NeedWriteContacts;\n","/home/pheno/Documents/makesense/client/src/components/Forms/FormInstitution.jsx",[],["161","162"],"/home/pheno/Documents/makesense/client/src/pages/Home.jsx",["163"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport apiHandler from \"../api/apiHandler.js\";\nimport { UserContext } from \"../components/Auth/UserContext\";\nimport Mycontacts from \"./Contacts/Mycontacts.jsx\";\nimport NeedCallContacts from \"./Contacts/NeedCallContacts.jsx\";\nimport NeedWriteContacts from \"./Contacts/NeedWriteContacts.jsx\";\n\nclass Home extends Component {\n  static contextType = UserContext;\n\n  state = {\n    contacts: [],\n  };\n\n  componentDidMount() {\n    apiHandler\n      .getAll(\"/api/contacts\")\n      .then((apiRes) => {\n        this.setState({ contacts: apiRes.data });\n        this.setInstitution();\n      })\n      .catch((apiErr) => {\n        console.log(apiErr);\n      });\n  }\n\n  setInstitution = () => {\n    for (const contact of this.state.contacts) {\n      if (contact.institution_code && !contact.institution) {\n        apiHandler\n          .getAll(\"/api/institutions/\")\n          .then((apiRes) => {\n            const filteredInstitutions = apiRes.data.filter((institution) =>\n              institution.code.includes(contact.institution_code)\n            );\n            apiHandler\n              .updateOne(\"/api/contacts/\" + contact._id, {\n                institution: filteredInstitutions[0]._id,\n              })\n              .then((apiRes) => {})\n              .catch((apiErr) => console.log(apiErr));\n          })\n          .catch((apiErr) => {\n            console.log(apiErr);\n          });\n      }\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"home page\">\n       \n        <div className=\"contacts-home\">\n        {this.context.user && this.context.user.contacts.length > 0 ? (\n          <Mycontacts />\n        ) : (\n          \"\"\n        )}\n          <NeedCallContacts />\n          <NeedWriteContacts />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","/home/pheno/Documents/makesense/client/src/components/NavMain.jsx",[],["164","165"],"/home/pheno/Documents/makesense/client/src/pages/Contacts/ActiveContacts.jsx",["166"],"import React, { Component } from \"react\";\nimport apiHandler from \"../../api/apiHandler\";\nimport { Link } from \"react-router-dom\";\nimport SearchBar from \"../../components/Forms/SearchBar\";\n\nclass ActiveContacts extends Component {\n  state = {\n    contacts: [],\n    searchContacts: [],\n  };\n\n  componentDidMount() {\n    apiHandler\n      .getAll(\"/api/contacts\")\n      .then((apiRes) => {\n        this.setState({ contacts: apiRes.data, searchContacts: apiRes.data });\n      })\n      .catch((apiErr) => {\n        console.log(apiErr);\n      });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.isUpdating !== prevProps.isUpdating) {\n      apiHandler\n        .getAll(\"/api/contacts\")\n        .then((apiRes) => {\n          this.setState({ contacts: apiRes.data, searchContacts: apiRes.data });\n          this.props.stopUpdating();\n        })\n        .catch((apiErr) => {\n          console.log(apiErr);\n        });\n    }\n  }\n\n  deleteOne(id) {\n    apiHandler\n      .deleteOne(\"/api/contacts/\", id)\n      .then((apiRes) => this.componentDidMount())\n      .catch((apiErr) => console.log(apiErr));\n  }\n\n  disableOne(id) {\n    apiHandler\n      .updateOne(\"/api/contacts/\" + id, {\n        isActive: false,\n      })\n      .then((apiRes) => {\n        apiHandler\n          .getAll(\"/api/contacts\")\n          .then((apiRes) => {\n            this.setState({\n              contacts: apiRes.data,\n              searchContacts: apiRes.data,\n            });\n            this.props.updating();\n          })\n          .catch((apiErr) => {\n            console.log(apiErr);\n          });\n      })\n      .catch((apiErr) => console.log(apiErr));\n  }\n\n  formatDate(date) {\n    const getDate = date.split(\"T\")[0].split(\"-\");\n    const formatedDate = `${getDate[2]}-${getDate[1]}-${getDate[0]}`;\n    // return `${date[2]}-${date[1]}-${date[0]}`;\n    return formatedDate;\n  }\n\n  search = (searchContact) => {\n    const copyContacts = [...this.state.contacts];\n\n    // return product.name.toLowerCase().includes(props.name.toLowerCase())\n\n    const filteredContacts = copyContacts.filter((contact) =>\n      contact.name.toLowerCase().includes(searchContact.search.toLowerCase())\n    );\n    this.setState({ searchContacts: filteredContacts });\n  };\n\n  render() {\n    if (!this.state.contacts) {\n      return <div>Loading</div>;\n    }\n\n    const contacts = this.state.searchContacts.filter(\n      (contact) => contact.isActive === true\n    );\n\n    return (\n      <div className=\"contacts-active\">\n        <h3 style={{ marginBottom: \"10px\", color: \"#e36164\" }}>\n          {contacts.length} contact{contacts.length > 1 ? \"s\" : \"\"} actif\n          {contacts.length > 1 ? \"s\" : \"\"}\n        </h3>\n        <SearchBar handleSearch={this.search} type=\"contact\"/>\n        <table>\n          <thead>\n            <tr>\n              <th scope=\"col\">Nom</th>\n              <th scope=\"col\">Dernier appel</th>\n              <th scope=\"col\">Fréquence</th>\n              <th scope=\"col\">Editer</th>\n              <th scope=\"col\">Désactiver</th>\n              <th scope=\"col\">Supprimer</th>\n            </tr>\n          </thead>\n          <tbody>\n            {contacts.map((contact) => (\n              <tr key={contact._id}>\n                <td scope=\"row\" data-label=\"Nom\">\n                  <Link to={`/contacts/${contact._id}/`}>{contact.name}</Link>\n                </td>\n                <td data-label=\"Dernier appel\">\n                  <Link to={`/contacts/${contact._id}/`}>\n                    {contact.lastcall\n                      ? this.formatDate(contact.lastcall)\n                      : \"never\"}\n                  </Link>\n                </td>\n                <td data-label=\"Fréquence\">\n                  <Link to={`/contacts/${contact._id}/`}>\n                  {contact.frequency}\n                  </Link>\n                </td>\n                <td data-label=\"Editer\">\n                  <Link to={`/contacts/${contact._id}/edit`}>\n                    <i className=\"fas fa-edit\"></i>\n                  </Link>\n                </td>\n                <td data-label=\"Désactiver\">\n                  <Link\n                    to={this.props}\n                    onClick={() => this.disableOne(contact._id)}\n                  >\n                    <i className=\"fas fa-user-times\"></i>\n                  </Link>\n                </td>\n                <td data-label=\"Supprimer\">\n                  <Link\n                    to={this.props}\n                    onClick={() => this.deleteOne(contact._id)}\n                  >\n                    <i className=\"fas fa-backspace\"></i>\n                  </Link>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default ActiveContacts;\n",["167","168"],"/home/pheno/Documents/makesense/client/src/pages/Contacts/NeedCallContacts.jsx",["169","170","171"],"import React, { Component } from \"react\";\nimport apiHandler from \"../../api/apiHandler\";\nimport SearchBar from \"../../components/Forms/SearchBar\";\nimport { Link } from \"react-router-dom\";\n\nclass NeedCallContacts extends Component {\n  state = {\n    contacts: [],\n    searchContacts: [],\n  };\n\n  componentDidMount() {\n    apiHandler\n      .getAll(\"/api/contacts\")\n      .then((apiRes) => {\n        this.getNeedCallContacts(apiRes.data);\n        this.isCallNeeded();\n      })\n      .catch((apiErr) => {\n        console.log(apiErr);\n      });\n  }\n\n  isCallNeeded() {\n    for (const [index, item] of this.state.contacts.entries()) {\n      if (item.lastcall) {\n        let lastcall = new Date(item.lastcall);\n        let today = new Date();\n\n        let dateDiff = lastcall.getTime() - today.getTime();\n        let days = Math.ceil(dateDiff / (1000 * 3600 * 24));\n        // console.log(days);\n\n        if (item.frequency === \"Chaque jour\" && days === -1) {\n          apiHandler\n            .updateOne(\"/api/contacts/\" + item._id, {\n              needcall: true,\n            })\n            .then((apiRes) =>\n              apiHandler\n                .getAll(\"/api/contacts\")\n                .then((apiRes) => {\n                  // this.setState({ contacts: apiRes.data });\n                  this.getNeedCallContacts(apiRes.data);\n                })\n                .catch((apiErr) => {\n                  console.log(apiErr);\n                })\n            )\n            .catch((apiErr) => console.log(apiErr));\n        } else if (item.frequency === \"2 fois par semaine\" && days === -3) {\n          apiHandler\n            .updateOne(\"/api/contacts/\" + item._id, {\n              needcall: true,\n            })\n            .then((apiRes) =>\n              apiHandler\n                .getAll(\"/api/contacts\")\n                .then((apiRes) => {\n                  this.getNeedCallContacts(apiRes.data);\n                })\n                .catch((apiErr) => {\n                  console.log(apiErr);\n                })\n            )\n            .catch((apiErr) => console.log(apiErr));\n        } else if (item.frequency === \"1 fois par semaine\" && days === -7) {\n          apiHandler\n            .updateOne(\"/api/contacts/\" + item._id, {\n              needcall: true,\n            })\n            .then((apiRes) =>\n              apiHandler\n                .getAll(\"/api/contacts\")\n                .then((apiRes) => {\n                  this.getNeedCallContacts(apiRes.data);\n                })\n                .catch((apiErr) => {\n                  console.log(apiErr);\n                })\n            )\n            .catch((apiErr) => console.log(apiErr));\n        }\n      }\n    }\n  }\n\n  getNeedCallContacts(contacts) {\n    const needCallContacts = contacts.filter(\n      (contact) =>\n        contact.needcall === true &&\n        contact.isActive === true &&\n        contact.type != \"eMail\"\n    );\n    this.setState({\n      contacts: needCallContacts,\n      searchContacts: needCallContacts,\n    });\n  }\n\n  formatDate(date) {\n    const getDate = date.split(\"T\")[0].split(\"-\");\n    const formatedDate = `${getDate[2]}-${getDate[1]}-${getDate[0]}`;\n    // return `${date[2]}-${date[1]}-${date[0]}`;\n    return formatedDate;\n  }\n\n  search = (searchContact) => {\n    const copyContacts = [...this.state.contacts];\n\n    // return product.name.toLowerCase().includes(props.name.toLowerCase())\n\n    const filteredContacts = copyContacts.filter((contact) =>\n      contact.name.toLowerCase().includes(searchContact.search.toLowerCase())\n    );\n    this.setState({ searchContacts: filteredContacts });\n  };\n\n  render() {\n    if (!this.state.contacts) {\n      return <div>Loading</div>;\n    }\n    return (\n      <div className=\"contacts-needcall\">\n        <h3 style={{ marginBottom: \"10px\", color: \"#e36164\" }}>\n          {this.state.searchContacts.length} contact\n          {this.state.searchContacts.length > 1 ? \"s\" : \"\"} attend\n          {this.state.searchContacts.length > 1 ? \"ent\" : \"\"} nos appels\n        </h3>\n        <SearchBar handleSearch={this.search} type=\"contact\" />\n        <table>\n          <thead>\n            <tr>\n              <th scope=\"col\">Nom</th>\n              <th scope=\"col\">Dernier Appel</th>\n              <th scope=\"col\">Fréquence d'appel</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.searchContacts.map((contact) => (\n              <tr key={contact._id}>\n                <td scope=\"row\" data-label=\"Nom\">\n                  <Link to={`/contacts/${contact._id}/`}>{contact.name}</Link>\n                </td>\n                <td data-label=\"Dernier Appel\">\n                  <Link to={`/contacts/${contact._id}/`}>\n                    {contact.lastcall\n                      ? this.formatDate(contact.lastcall)\n                      : \"never\"}\n                  </Link>\n                </td>\n                <td data-label=\"Fréquence d'appel\">\n                  <Link to={`/contacts/${contact._id}/`}>\n                    {contact.frequency}\n                  </Link>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default NeedCallContacts;\n","/home/pheno/Documents/makesense/client/src/App.jsx",[],["172","173"],"/home/pheno/Documents/makesense/client/src/pages/Contacts/InactiveContacts.jsx",["174"],"import React, { Component } from \"react\";\nimport apiHandler from \"../../api/apiHandler\";\nimport { Link } from \"react-router-dom\";\nimport SearchBar from \"../../components/Forms/SearchBar\";\n\nclass InactiveContacts extends Component {\n  state = {\n    contacts: [],\n    searchContacts: [],\n  };\n\n  componentDidMount() {\n    apiHandler\n      .getAll(\"/api/contacts\")\n      .then((apiRes) => {\n        this.setState({ contacts: apiRes.data, searchContacts: apiRes.data });\n      })\n      .catch((apiErr) => {\n        console.log(apiErr);\n      });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.isUpdating !== prevProps.isUpdating) {\n      apiHandler\n        .getAll(\"/api/contacts\")\n        .then((apiRes) => {\n          this.setState({ contacts: apiRes.data, searchContacts: apiRes.data });\n          this.props.stopUpdating();\n        })\n        .catch((apiErr) => {\n          console.log(apiErr);\n        });\n    }\n  }\n\n  deleteOne(id) {\n    apiHandler\n      .deleteOne(\"/api/contacts/\", id)\n      .then((apiRes) => this.componentDidMount())\n      .catch((apiErr) => console.log(apiErr));\n  }\n\n  activeOne(id) {\n    apiHandler\n      .updateOne(\"/api/contacts/\" + id, {\n        isActive: true,\n      })\n      .then((apiRes) => {\n        apiHandler\n          .getAll(\"/api/contacts\")\n          .then((apiRes) => {\n            this.setState({ contacts: apiRes.data });\n            this.props.updating();\n          })\n          .catch((apiErr) => {\n            console.log(apiErr);\n          });\n      })\n      .catch((apiErr) => console.log(apiErr));\n  }\n\n  formatDate(date) {\n    const getDate = date.split(\"T\")[0].split(\"-\");\n    const formatedDate = `${getDate[2]}-${getDate[1]}-${getDate[0]}`;\n    // return `${date[2]}-${date[1]}-${date[0]}`;\n    return formatedDate;\n  }\n\n  search = (searchContact) => {\n    const copyContacts = [...this.state.contacts];\n\n    // return product.name.toLowerCase().includes(props.name.toLowerCase())\n\n    const filteredContacts = copyContacts.filter((contact) =>\n      contact.name.toLowerCase().includes(searchContact.search.toLowerCase())\n    );\n    this.setState({ searchContacts: filteredContacts });\n  };\n\n  render() {\n    if (!this.state.contacts) {\n      return <div>Loading</div>;\n    }\n\n    const InactiveContacts = this.state.searchContacts.filter(\n      (contact) => contact.isActive === false\n    );\n\n    return (\n      <div className=\"contacts-inactive\">\n        <h3 style={{ marginBottom: \"10px\", color: \"#e36164\" }}>\n          {InactiveContacts.length} contact\n          {InactiveContacts.length > 1 ? \"s\" : \"\"} inactif\n          {InactiveContacts.length > 1 ? \"s\" : \"\"}\n        </h3>\n        <SearchBar handleSearch={this.search} type=\"contact\" />\n        <table>\n          <thead>\n            <tr>\n              <th scope=\"col\">Nom</th>\n              <th scope=\"col\">Dernier appel</th>\n              <th scope=\"col\">Editer</th>\n              <th scope=\"col\">Activer</th>\n              <th scope=\"col\">Supprimer</th>\n            </tr>\n          </thead>\n          <tbody>\n            {InactiveContacts.map((contact) => (\n              <tr key={contact._id}>\n                <td scope=\"row\" data-label=\"Nom\">\n                  <Link to={`/contacts/${contact._id}/`}>{contact.name}</Link>\n                </td>\n                <td data-label=\"Dernier appel\">\n                  <Link to={`/contacts/${contact._id}/`}>\n                    {contact.lastcall\n                      ? this.formatDate(contact.lastcall)\n                      : \"never\"}\n                  </Link>\n                </td>\n                <td data-label=\"Editer\">\n                  <Link to={`/contacts/${contact._id}/edit`}>\n                    <i className=\"fas fa-edit\"></i>\n                  </Link>\n                </td>\n                <td data-label=\"Réactiver\">\n                  <Link\n                    to={this.props}\n                    onClick={() => this.activeOne(contact._id)}\n                  >\n                    <i className=\"fas fa-user-plus\"></i>\n                  </Link>\n                </td>\n                <td data-label=\"Supprimer\">\n                  <Link\n                    to={this.props}\n                    onClick={() => this.deleteOne(contact._id)}\n                  >\n                    <i className=\"fas fa-backspace\"></i>\n                  </Link>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default InactiveContacts;\n","/home/pheno/Documents/makesense/client/src/components/Forms/FormSignin.jsx",[],"/home/pheno/Documents/makesense/client/src/components/Forms/FormCall.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Profile.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Contacts/Contacts.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Contacts/CreateContact.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Institutions/CreateInstitution.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Contacts/OneContact.jsx",["175","176"],"/home/pheno/Documents/makesense/client/src/pages/Institutions/Institutions.jsx",["177"],"import React, { Component } from \"react\";\nimport apiHandler from \"../../api/apiHandler\";\nimport { Link } from \"react-router-dom\";\nimport SearchBar from \"../../components/Forms/SearchBar\";\n\nclass Institutions extends Component {\n  state = {\n    institutions: [],\n    searchInstitutions: [],\n    departement: \"Ain\",\n  };\n\n  componentDidMount() {\n    apiHandler\n      .getAll(\"/api/institutions\")\n      .then((apiRes) => {\n        this.setState({\n          institutions: apiRes.data,\n          searchInstitutions: apiRes.data,\n        });\n      })\n      .catch((apiErr) => {\n        console.log(apiErr);\n      });\n  }\n\n  deleteOne(id) {\n    apiHandler\n      .deleteOne(\"/api/institutions/\", id)\n      .then((apiRes) => this.componentDidMount())\n      .catch((apiErr) => console.log(apiErr));\n  }\n\n  handleChange = (event) => {\n    // const name = event.target.name;\n    const value = event.target.value;\n\n    this.setState({\n      departement: value,\n    });\n  };\n\n  search = (searchInstitution) => {\n    const copyInstitutions = [...this.state.institutions];\n\n    const filteredInstitutions = copyInstitutions.filter((institution) =>\n      institution.name\n        .toLowerCase()\n        .includes(searchInstitution.search.toLowerCase())\n    );\n    this.setState({ searchInstitutions: filteredInstitutions });\n  };\n\n  render() {\n    if (!this.state.institutions) {\n      return <div>Loading</div>;\n    }\n\n    const filteredDep = this.state.searchInstitutions.filter(\n      (institution) => institution.departement === this.state.departement\n    );\n    // const depList  = [...new Set(array)];\n\n    // const depArr = [];\n    // for (const [index, item] of this.state.institutions.entries()) {\n    //   depArr.push(item.departement);\n    // }\n\n    const depList = [\n      \"Ain\",\n      \"Aisne\",\n      \"Allier\",\n      \"Alpes-de-Haute-Provence\",\n      \"Hautes-Alpes\",\n      \"Alpes-Maritimes\",\n      \"Ardèche\",\n      \"Ardennes\",\n      \"Ariège\",\n      \"Aube\",\n      \"Aude\",\n      \"Aveyron\",\n      \"Bouches-du-Rhône\",\n      \"Calvados\",\n      \"Cantal\",\n      \"Charente\",\n      \"Charente-Maritime\",\n      \"Cher\",\n      \"Corrèze\",\n      \"Corse\",\n      \"Côte-d'Or\",\n      \"Côtes-d'Armor\",\n      \"Creuse\",\n      \"Dordogne\",\n      \"Gironde\",\n      \"Doubs\",\n      \"Drôme\",\n      \"Eure\",\n      \"Eure-et-Loir\",\n      \"Finistère\",\n      \"Gard\",\n      \"Haute-Garonne\",\n      \"Gers\",\n      \"Hérault\",\n      \"Ille-et-Vilaine\",\n      \"Indre\",\n      \"Indre-et-Loire\",\n      \"Isère\",\n      \"Jura\",\n      \"Landes\",\n      \"Loir-et-Cher\",\n      \"Loire\",\n      \"Haute-Loire\",\n      \"Loire-Atlantique\",\n      \"Loiret\",\n      \"Lot\",\n      \"Lot-et-Garonne\",\n      \"Lozère\",\n      \"Maine-et-Loire\",\n      \"Manche\",\n      \"Marne\",\n      \"Haute-Marne\",\n      \"Mayenne\",\n      \"Meurthe-et-Moselle\",\n      \"Meuse\",\n      \"Morbihan\",\n      \"Moselle\",\n      \"Nièvre\",\n      \"Nord\",\n      \"Oise\",\n      \"Orne\",\n      \"Pas-de-Calais\",\n      \"Puy-de-Dôme\",\n      \"Pyrénées-Atlantiques\",\n      \"Hautes-Pyrénées\",\n      \"Pyrénées-Orientales\",\n      \"Bas-Rhin\",\n      \"Haut-Rhin\",\n      \"Rhône\",\n      \"Haute-Saône\",\n      \"Saône-et-Loire\",\n      \"Sarthe\",\n      \"Savoie\",\n      \"Haute-Savoie\",\n      \"Paris\",\n      \"Seine-Maritime\",\n      \"Seine-et-Marne\",\n      \"Yvelines\",\n      \"Deux-Sèvres\",\n      \"Somme\",\n      \"Tarn\",\n      \"Tarn-et-Garonne\",\n      \"Var\",\n      \"Vaucluse\",\n      \"Vendée\",\n      \"Vienne\",\n      \"Haute-Vienne\",\n      \"Vosges\",\n      \"Yonne\",\n      \"Territoire de Belfort\",\n      \"Essonne\",\n      \"Hauts-de-Seine\",\n      \"Seine-St-Denis\",\n      \"Val-de-Marne\",\n      \"Val-D'Oise\",\n      \"Guadeloupe\",\n      \"Martinique\",\n      \"Guyane\",\n      \"La Réunion\",\n    ];\n\n    return (\n      <div className=\"page institutions\">\n        <h1>Les établissements</h1>\n        <Link\n          style={{ marginBottom: \"40px\" }}\n          className=\"btn red\"\n          to={\"/institutions/create\"}\n        >\n          Ajouter un établissement\n        </Link>\n        <div style={{ marginBottom: \"20px\" }}>\n          <label className=\"label\" htmlFor=\"departement\">\n            Département :&nbsp;\n          </label>\n\n          <select\n            id=\"departement\"\n            defautvalue={\"Ain\"}\n            name=\"departement\"\n            onChange={this.handleChange}\n          >\n            {depList.map((dep) => (\n              <option key={dep} value={dep}>\n                {dep}\n              </option>\n            ))}\n          </select>\n        </div>\n        <SearchBar handleSearch={this.search} type=\"établissement\"/>\n        <table>\n          <thead>\n            <tr>\n              <th scope=\"col\">Code établissement</th>\n              <th scope=\"col\">Type</th>\n              <th scope=\"col\">Nom</th>\n              <th scope=\"col\">Groupe</th>\n              <th scope=\"col\">CP</th>\n              <th scope=\"col\">Ville</th>\n              <th scope=\"col\">Département</th>\n              <th scope=\"col\">Editer</th>\n              <th scope=\"col\">Supprimer</th>\n            </tr>\n          </thead>\n          <tbody>\n            {filteredDep.map((institution) => (\n              <tr key={institution._id}>\n                <td scope=\"row\" data-label=\"Code\">\n                  {institution.code}\n                </td>\n                <td data-label=\"Type\">{institution.type}</td>\n                <td data-label=\"Nom\">{institution.name}</td>\n                <td data-label=\"Groupe\">{institution.groupe}</td>\n                <td data-label=\"Code postale\">{institution.postal_code}</td>\n                <td data-label=\"Ville\">{institution.city}</td>\n                <td data-label=\"Département\">{institution.departement}</td>\n                <td data-label=\"Editer\">\n                  <Link to={`/institutions/${institution._id}/edit`}>\n                    <i className=\"fas fa-edit\"></i>\n                  </Link>\n                </td>\n                <td data-label=\"Supprimer\">\n                  <Link\n                    to={this.props}\n                    onClick={() => this.deleteOne(institution._id)}\n                  >\n                    <i className=\"fas fa-backspace\"></i>\n                  </Link>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Institutions;\n","/home/pheno/Documents/makesense/client/src/pages/Institutions/OneInstitution.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Users/CreateUser.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Users/EditUser.jsx",[],"/home/pheno/Documents/makesense/client/src/pages/Contacts/Mycontacts.jsx",["178","179"],"import React, { Component } from \"react\";\nimport apiHandler from \"../../api/apiHandler.js\";\nimport { UserContext } from \"../../components/Auth/UserContext\";\nimport { Link } from \"react-router-dom\";\nimport SearchBar from \"../../components/Forms/SearchBar\";\n\nclass Mycontacts extends Component {\n  static contextType = UserContext;\n\n  state = {\n    mycontacts: [],\n  };\n\n  componentDidMount() {\n    apiHandler\n      .getOne(\"/api/users/\", this.context.user._id)\n      .then((apiRes) => {\n        // console.log(\"fdsfds\");\n        // this.setState({ mycontacts: apiRes.data.contacts });\n        this.getContacts(apiRes.data.contacts);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  getContacts = (data) => {\n    const contactsArr = [];\n    for (const [index, item] of data.entries()) {\n      // console.log(item.contact);\n      apiHandler\n        .getOne(\"/api/contacts/\", item.contact)\n        .then((apiRes) => {\n          // console.log(apiRes.data);\n          contactsArr.push(apiRes.data);\n          this.setState({ mycontacts: contactsArr });\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  };\n\n  formatDate(date) {\n    const getDate = date.split(\"T\")[0].split(\"-\");\n    const formatedDate = `${getDate[2]}-${getDate[1]}-${getDate[0]}`;\n    // return `${date[2]}-${date[1]}-${date[0]}`;\n    return formatedDate;\n  }\n\n  search = (searchContact) => {\n    return null;\n  };\n\n  render() {\n    return (\n      <div className=\"contacts-mycontacts\">\n        <h3 style={{ marginBottom: \"10px\", color: \"#e36164\" }}>Mes contacts</h3>\n        <SearchBar handleSearch={this.search} type=\"contact\" />\n        <table>\n          <thead>\n            <tr>\n              <th scope=\"col\">Nom</th>\n              <th scope=\"col\">Dernier appel</th>\n              <th scope=\"col\">Fréquence d'appel</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.mycontacts.map((contact) => (\n              <tr key={contact._id}>\n                <td scope=\"row\" data-label=\"Nom\">\n                  <Link to={`/contacts/${contact._id}/`}>{contact.name}</Link>\n                </td>\n                <td data-label=\"Dernier Appel\">\n                  <Link to={`/contacts/${contact._id}/`}>\n                    {contact.lastcall\n                      ? this.formatDate(contact.lastcall)\n                      : \"never\"}\n                  </Link>\n                </td>\n                <td data-label=\"Fréquence d'appel\">\n                  <Link to={`/contacts/${contact._id}/`}>\n                    {contact.frequency}\n                  </Link>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Mycontacts;\n","/home/pheno/Documents/makesense/client/src/components/Forms/FormSignup.jsx",[],"/home/pheno/Documents/makesense/client/src/components/Forms/SearchBar.jsx",[],"/home/pheno/Documents/makesense/client/src/components/ProtectedRoute.jsx",[],"/home/pheno/Documents/makesense/client/src/components/ProtectedAdminRoute.jsx",[],"/home/pheno/Documents/makesense/client/src/components/Forms/FormContact.jsx",[],"/home/pheno/Documents/makesense/client/src/api/apiHandler.js",["180"],{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","replacedBy":"184"},{"ruleId":"181","replacedBy":"185"},{"ruleId":"183","replacedBy":"186"},{"ruleId":"187","severity":1,"message":"188","line":25,"column":17,"nodeType":"189","messageId":"190","endLine":25,"endColumn":22},{"ruleId":"191","severity":1,"message":"192","line":141,"column":21,"nodeType":"193","endLine":141,"endColumn":32},{"ruleId":"181","replacedBy":"194"},{"ruleId":"183","replacedBy":"195"},{"ruleId":"187","severity":1,"message":"196","line":2,"column":10,"nodeType":"189","messageId":"190","endLine":2,"endColumn":14},{"ruleId":"181","replacedBy":"197"},{"ruleId":"183","replacedBy":"198"},{"ruleId":"191","severity":1,"message":"192","line":114,"column":21,"nodeType":"193","endLine":114,"endColumn":32},{"ruleId":"181","replacedBy":"199"},{"ruleId":"183","replacedBy":"200"},{"ruleId":"187","severity":1,"message":"188","line":25,"column":17,"nodeType":"189","messageId":"190","endLine":25,"endColumn":22},{"ruleId":"201","severity":1,"message":"202","line":93,"column":22,"nodeType":"203","messageId":"204","endLine":93,"endColumn":24},{"ruleId":"191","severity":1,"message":"192","line":142,"column":21,"nodeType":"193","endLine":142,"endColumn":32},{"ruleId":"181","replacedBy":"205"},{"ruleId":"183","replacedBy":"206"},{"ruleId":"191","severity":1,"message":"192","line":111,"column":21,"nodeType":"193","endLine":111,"endColumn":32},{"ruleId":"187","severity":1,"message":"188","line":52,"column":17,"nodeType":"189","messageId":"190","endLine":52,"endColumn":22},{"ruleId":"187","severity":1,"message":"188","line":187,"column":17,"nodeType":"189","messageId":"190","endLine":187,"endColumn":22},{"ruleId":"191","severity":1,"message":"192","line":217,"column":21,"nodeType":"193","endLine":217,"endColumn":32},{"ruleId":"187","severity":1,"message":"188","line":29,"column":17,"nodeType":"189","messageId":"190","endLine":29,"endColumn":22},{"ruleId":"191","severity":1,"message":"192","line":71,"column":21,"nodeType":"193","endLine":71,"endColumn":32},{"ruleId":"207","severity":1,"message":"208","line":16,"column":1,"nodeType":"209","endLine":73,"endColumn":3},"no-native-reassign",["210"],"no-negated-in-lhs",["211"],["210"],["211"],"no-unused-vars","'index' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/scope","The scope prop can only be used on <th> elements.","JSXAttribute",["210"],["211"],"'Link' is defined but never used.",["210"],["211"],["210"],["211"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["210"],["211"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]